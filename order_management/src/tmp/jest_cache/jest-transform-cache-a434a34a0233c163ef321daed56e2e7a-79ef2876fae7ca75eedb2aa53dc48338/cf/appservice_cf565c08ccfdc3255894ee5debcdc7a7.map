{"file":"C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\order_management\\src\\app.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\order_management\\src\\app.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Order, PurchaseOrder } from './order.entity';\r\nimport { Repository, ILike } from 'typeorm';\r\nimport {OrderDTO} from './DTO/OrderDTO';\r\nimport {UpdateOrderDTO} from \"./DTO/UpdateOrderDTO\";\r\nimport { PurchaseOrderDTO, UpdatePurchaseOrderDTO } from './DTO/purchaseOrderDTO';\r\nimport { Query } from 'express-serve-static-core';\r\n\r\n\r\n@Injectable()\r\nexport class AppService {\r\n\r\n  constructor(\r\n      @InjectRepository(Order)\r\n      private readonly customerOrderRepository: Repository<Order>,\r\n\r\n      @InjectRepository(PurchaseOrder)\r\n      private readonly inventoryOrderRepository: Repository<PurchaseOrder>,\r\n  ) {}\r\n\r\n  async createOrders(createOrderDTO: OrderDTO): Promise<Order> {\r\n    const newOrder = this.customerOrderRepository.create({\r\n      ...createOrderDTO,\r\n      orderDate: new Date(),\r\n      lastOrderStatusUpdatedDate: new Date() // Set the lastOrderStatusUpdatedDate to the current date when a new order is created\r\n    });\r\n    return await this.customerOrderRepository.save(newOrder);\r\n  }\r\n\r\n  async findOrder(id:any): Promise<Order | null>{\r\n    return await this.customerOrderRepository.findOneById(id);\r\n  }\r\n\r\n  async getAllOrders():Promise<Order[]>{\r\n    return await this.customerOrderRepository.find();\r\n  }\r\n\r\n  async updateOrder(id: number, updateOrderDto: UpdateOrderDTO): Promise<Order> {\r\n\r\n    await this.customerOrderRepository.update(id, {\r\n      ...updateOrderDto,\r\n      lastOrderStatusUpdatedDate: new Date()\r\n    });\r\n    return await this.customerOrderRepository.findOneById(id);\r\n  }\r\n\r\n  async deleteOrder(id: number){\r\n    const result = await this.customerOrderRepository.delete(id);\r\n    if(!result){\r\n      return \"Not Deleted\";\r\n    }else{\r\n      return \"Successfully Deleted\";\r\n    }\r\n  }\r\n\r\n\r\n  //=============================================INVENTORY_ORDER_MANAGEMENT======================================================================\r\n\r\n  async createPurchaseOrder(purchaseOrderDTO: PurchaseOrderDTO): Promise<PurchaseOrder> {\r\n    const newPurchaseOrder = this.inventoryOrderRepository.create(purchaseOrderDTO);\r\n    return await this.inventoryOrderRepository.save(newPurchaseOrder);\r\n}  \r\n\r\nasync getAllPurchaseOrder(): Promise<PurchaseOrder[]> {\r\n    return await this.inventoryOrderRepository.find();\r\n}\r\n\r\nasync getPurchaseOrderById(purchase_id: number): Promise<PurchaseOrder> {\r\n    return await this.inventoryOrderRepository.findOneById(purchase_id);\r\n}\r\n\r\nasync updatePurchaseOrder(id: number, updatePurchaseOrderDTO: UpdatePurchaseOrderDTO): Promise<PurchaseOrder> {\r\n  console.log(\"ser:\",updatePurchaseOrderDTO)\r\n  await this.inventoryOrderRepository.update(id, updatePurchaseOrderDTO);\r\n  return await this.inventoryOrderRepository.findOneById(id);\r\n}\r\n\r\nasync deletePurchaseOrder(purchase_id:number){\r\n    const result = await this.inventoryOrderRepository.delete(purchase_id);\r\n    if (!result) {\r\n      return 'Not Deleted';\r\n    } else {\r\n      return 'Successfully Deleted';\r\n    }\r\n  }\r\n\r\n  async getCountOfOrdersByStatus(status: string): Promise<number> {\r\n    const currentDate = new Date();\r\n    const currentYear = currentDate.getFullYear();\r\n    const currentMonth = currentDate.getMonth() + 1; //January =0\r\n\r\n    const query = this.inventoryOrderRepository.createQueryBuilder('purchase_order')\r\n        .andWhere(`EXTRACT(YEAR FROM purchase_order.createdDate) = :year`, { year: currentYear })\r\n        .andWhere(`EXTRACT(MONTH FROM purchase_order.createdDate) = :month`, { month: currentMonth });\r\n\r\n    if (status !== 'total') {\r\n        query.andWhere('purchase_order.status = :status', { status });\r\n    }\r\n\r\n    return await query.getCount();\r\n}\r\n\r\ngetCurrentMonthName(): string {\r\n  const months = [\r\n      \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n      \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n  ];\r\n  const currentMonthIndex = new Date().getMonth(); // getMonth() is zero-indexed\r\n  return months[currentMonthIndex];\r\n}\r\n\r\nasync searchAllOrders(query: Query): Promise<PurchaseOrder[]> {\r\nconsole.log('Received query:', query);\r\nconst keyword = (query.query as { keyword?: string }).keyword;\r\ntry {\r\n  const filteredorders = await this.inventoryOrderRepository.find({ where: { supplierName: ILike(`%${keyword}%`) } });\r\n  console.log('Filtered orders:', filteredorders);\r\n  return filteredorders;\r\n} catch (error) {\r\n  console.error('Error occurred while searching orders:', error);\r\n  return [];\r\n}\r\n}\r\n\r\nasync markAsDeparted(id: number): Promise<PurchaseOrder> {\r\n  const purchaseOrder = await this.inventoryOrderRepository.findOne({ where: { id } });\r\n\r\n  if (!purchaseOrder) {\r\n    throw new Error('Purchase order not found');\r\n  }\r\n\r\n  purchaseOrder.status = 'Departed';\r\n  purchaseOrder.departedDate = new Date();\r\n\r\n  return this.inventoryOrderRepository.save(purchaseOrder);\r\n}\r\n\r\n}\r\n\r\n\r\n\r\n"],"version":3}