29f343ff58b8dbb1bd7033bf7f87ce85
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppService = void 0;
const common_1 = require("@nestjs/common");
const typeorm_1 = require("@nestjs/typeorm");
const order_entity_1 = require("./order.entity");
const typeorm_2 = require("typeorm");
let AppService = class AppService {
    constructor(customerOrderRepository, inventoryOrderRepository) {
        this.customerOrderRepository = customerOrderRepository;
        this.inventoryOrderRepository = inventoryOrderRepository;
    }
    async createOrders(createOrderDTO) {
        const newOrder = this.customerOrderRepository.create({
            ...createOrderDTO,
            orderDate: new Date(),
            lastOrderStatusUpdatedDate: new Date() // Set the lastOrderStatusUpdatedDate to the current date when a new order is created
        });
        return await this.customerOrderRepository.save(newOrder);
    }
    async findOrder(id) {
        return await this.customerOrderRepository.findOneById(id);
    }
    async getAllOrders() {
        return await this.customerOrderRepository.find();
    }
    async updateOrder(id, updateOrderDto) {
        await this.customerOrderRepository.update(id, {
            ...updateOrderDto,
            lastOrderStatusUpdatedDate: new Date()
        });
        return await this.customerOrderRepository.findOneById(id);
    }
    async deleteOrder(id) {
        const result = await this.customerOrderRepository.delete(id);
        if (!result) {
            return "Not Deleted";
        }
        else {
            return "Successfully Deleted";
        }
    }
    //=============================================INVENTORY_ORDER_MANAGEMENT======================================================================
    async createPurchaseOrder(purchaseOrderDTO) {
        const newPurchaseOrder = this.inventoryOrderRepository.create(purchaseOrderDTO);
        return await this.inventoryOrderRepository.save(newPurchaseOrder);
    }
    async getAllPurchaseOrder() {
        return await this.inventoryOrderRepository.find();
    }
    async getPurchaseOrderById(purchase_id) {
        return await this.inventoryOrderRepository.findOneById(purchase_id);
    }
    async updatePurchaseOrder(id, updatePurchaseOrderDTO) {
        console.log("ser:", updatePurchaseOrderDTO);
        await this.inventoryOrderRepository.update(id, updatePurchaseOrderDTO);
        return await this.inventoryOrderRepository.findOneById(id);
    }
    async deletePurchaseOrder(purchase_id) {
        const result = await this.inventoryOrderRepository.delete(purchase_id);
        if (!result) {
            return 'Not Deleted';
        }
        else {
            return 'Successfully Deleted';
        }
    }
    async getCountOfOrdersByStatus(status) {
        const currentDate = new Date();
        const currentYear = currentDate.getFullYear();
        const currentMonth = currentDate.getMonth() + 1; //January =0
        const query = this.inventoryOrderRepository.createQueryBuilder('purchase_order')
            .andWhere(`EXTRACT(YEAR FROM purchase_order.createdDate) = :year`, { year: currentYear })
            .andWhere(`EXTRACT(MONTH FROM purchase_order.createdDate) = :month`, { month: currentMonth });
        if (status !== 'total') {
            query.andWhere('purchase_order.status = :status', { status });
        }
        return await query.getCount();
    }
    getCurrentMonthName() {
        const months = [
            "January", "February", "March", "April", "May", "June",
            "July", "August", "September", "October", "November", "December"
        ];
        const currentMonthIndex = new Date().getMonth(); // getMonth() is zero-indexed
        return months[currentMonthIndex];
    }
    async searchAllOrders(query) {
        console.log('Received query:', query);
        const keyword = query.query.keyword;
        try {
            const filteredorders = await this.inventoryOrderRepository.find({ where: { supplierName: (0, typeorm_2.ILike)(`%${keyword}%`) } });
            console.log('Filtered orders:', filteredorders);
            return filteredorders;
        }
        catch (error) {
            console.error('Error occurred while searching orders:', error);
            return [];
        }
    }
    async markAsDeparted(id) {
        const purchaseOrder = await this.inventoryOrderRepository.findOne({ where: { id } });
        if (!purchaseOrder) {
            throw new Error('Purchase order not found');
        }
        purchaseOrder.status = 'Departed';
        purchaseOrder.departedDate = new Date();
        return this.inventoryOrderRepository.save(purchaseOrder);
    }
};
exports.AppService = AppService;
exports.AppService = AppService = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, typeorm_1.InjectRepository)(order_entity_1.Order)),
    __param(1, (0, typeorm_1.InjectRepository)(order_entity_1.PurchaseOrder)),
    __metadata("design:paramtypes", [typeorm_2.Repository,
        typeorm_2.Repository])
], AppService);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,