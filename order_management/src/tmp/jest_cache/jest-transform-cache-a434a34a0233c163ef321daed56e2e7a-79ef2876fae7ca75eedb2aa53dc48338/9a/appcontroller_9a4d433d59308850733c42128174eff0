73fb324ed6d6e9660f5d5f559f712c69
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppController = void 0;
const common_1 = require("@nestjs/common");
const app_service_1 = require("./app.service");
const microservices_1 = require("@nestjs/microservices");
const OrderDTO_1 = require("./DTO/OrderDTO");
const purchaseOrderDTO_1 = require("./DTO/purchaseOrderDTO");
let AppController = class AppController {
    constructor(orderManagement) {
        this.orderManagement = orderManagement;
    }
    async createOrders(createOrderDto) {
        return await this.orderManagement.createOrders(createOrderDto);
    }
    async getOrderById(id) {
        return await this.orderManagement.findOrder(id);
    }
    async getAllOrders() {
        return await this.orderManagement.getAllOrders();
    }
    async updateOrder(data) {
        const { id, updateOrderDto } = data;
        return await this.orderManagement.updateOrder(id, updateOrderDto);
    }
    async deleteOrder(id) {
        return await this.orderManagement.deleteOrder(id);
    }
    //=============================================INVENTORY_ORDER_MANAGEMENT======================================================================
    async createPurchaseOrder(purchaseOrderDTO) {
        return this.orderManagement.createPurchaseOrder(purchaseOrderDTO);
    }
    async getAllPurchaseOrder() {
        return this.orderManagement.getAllPurchaseOrder();
    }
    async getPurchaseOrderById(purchase_id) {
        return this.orderManagement.getPurchaseOrderById(purchase_id);
    }
    async updatePurchaseOrder(data) {
        console.log("con:", data);
        const { id, updatePurchaseOrderDTO } = data;
        return await this.orderManagement.updatePurchaseOrder(id, updatePurchaseOrderDTO);
    }
    async deletePurchaseOrder(purchase_id) {
        return this.orderManagement.deletePurchaseOrder(purchase_id);
    }
    async getCountOfOrdersByStatus(status) {
        return this.orderManagement.getCountOfOrdersByStatus(status);
    }
    getCurrentMonthName() {
        return this.orderManagement.getCurrentMonthName();
    }
    async searchAllOrders(query) {
        return await this.orderManagement.searchAllOrders(query);
    }
    async markPurchaseOrderAsDeparted(id) {
        return await this.orderManagement.markAsDeparted(id);
    }
};
exports.AppController = AppController;
__decorate([
    (0, microservices_1.MessagePattern)({ cmd: 'CREATE_ORDER' }),
    __param(0, (0, microservices_1.Payload)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [OrderDTO_1.OrderDTO]),
    __metadata("design:returntype", Promise)
], AppController.prototype, "createOrders", null);
__decorate([
    (0, microservices_1.MessagePattern)({ cmd: 'GET_ORDER' }),
    __param(0, (0, microservices_1.Payload)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], AppController.prototype, "getOrderById", null);
__decorate([
    (0, microservices_1.MessagePattern)({ cmd: 'GET_ALL_ORDERS' }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], AppController.prototype, "getAllOrders", null);
__decorate([
    (0, microservices_1.MessagePattern)({ cmd: 'UPDATE_ORDER' }),
    __param(0, (0, microservices_1.Payload)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], AppController.prototype, "updateOrder", null);
__decorate([
    (0, microservices_1.MessagePattern)({ cmd: 'DELETE_ORDER' }),
    __param(0, (0, microservices_1.Payload)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number]),
    __metadata("design:returntype", Promise)
], AppController.prototype, "deleteOrder", null);
__decorate([
    (0, microservices_1.MessagePattern)({ cmd: 'CREATE_PURCHASE_ORDER' }),
    __param(0, (0, microservices_1.Payload)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [purchaseOrderDTO_1.PurchaseOrderDTO]),
    __metadata("design:returntype", Promise)
], AppController.prototype, "createPurchaseOrder", null);
__decorate([
    (0, microservices_1.MessagePattern)({ cmd: 'GET_ALL_PURCHASE_ORDER' }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], AppController.prototype, "getAllPurchaseOrder", null);
__decorate([
    (0, microservices_1.MessagePattern)({ cmd: 'GET_PURCHASE_ORDER_BY_ID' }),
    __param(0, (0, microservices_1.Payload)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number]),
    __metadata("design:returntype", Promise)
], AppController.prototype, "getPurchaseOrderById", null);
__decorate([
    (0, microservices_1.MessagePattern)({ cmd: 'UPDATE_PURCHASE_ORDER' }),
    __param(0, (0, microservices_1.Payload)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], AppController.prototype, "updatePurchaseOrder", null);
__decorate([
    (0, microservices_1.MessagePattern)({ cmd: 'DELETE_PURCHASE_ORDER' }),
    __param(0, (0, microservices_1.Payload)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number]),
    __metadata("design:returntype", Promise)
], AppController.prototype, "deletePurchaseOrder", null);
__decorate([
    (0, microservices_1.MessagePattern)({ cmd: 'GET_COUNT_OF_ORDERS_BY_STATUS' }),
    __param(0, (0, microservices_1.Payload)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", Promise)
], AppController.prototype, "getCountOfOrdersByStatus", null);
__decorate([
    (0, microservices_1.MessagePattern)({ cmd: 'GET_CURRENT_MONTH_NAME' }),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", String)
], AppController.prototype, "getCurrentMonthName", null);
__decorate([
    (0, microservices_1.MessagePattern)({ cmd: 'SEARCH_ALL_ORDERS' }),
    __param(0, (0, microservices_1.Payload)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], AppController.prototype, "searchAllOrders", null);
__decorate([
    (0, microservices_1.MessagePattern)({ cmd: 'MARK_PURCHASE_ORDER_AS_DEPARTED' }),
    __param(0, (0, microservices_1.Payload)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number]),
    __metadata("design:returntype", Promise)
], AppController.prototype, "markPurchaseOrderAsDeparted", null);
exports.AppController = AppController = __decorate([
    (0, common_1.Controller)(),
    __metadata("design:paramtypes", [app_service_1.AppService])
], AppController);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,