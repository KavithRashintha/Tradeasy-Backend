1857a68bf863034d852841a610c33557
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const app_controller_1 = require("./app.controller");
const app_service_1 = require("./app.service");
describe('AppController', () => {
    let appController;
    let appService;
    beforeEach(async () => {
        const moduleRef = await testing_1.Test.createTestingModule({
            controllers: [app_controller_1.AppController],
            providers: [app_service_1.AppService],
        }).compile();
        appService = moduleRef.get(app_service_1.AppService);
        appController = moduleRef.get(app_controller_1.AppController);
    });
    describe('createOrders', () => {
        it('should create an order', async () => {
            const orderDto = {
                orderId: 1,
                orderReceiverName: 'John Doe',
                orderReceiverAddress: '123 Main St',
                orderReceiverContact: '123-456-7890',
                orderItems: ['Item 1', 'Item 2'],
                orderPrice: 100,
                orderStatus: 'Pending',
            };
            jest.spyOn(appService, 'createOrders').mockResolvedValueOnce(orderDto);
            const result = await appController.createOrders(orderDto);
            expect(result).toEqual(orderDto);
        });
    });
    describe('getOrderById', () => {
        it('should return an order by ID', async () => {
            const orderId = 1;
            const order = {
                orderId,
                orderReceiverName: 'John Doe',
                orderReceiverAddress: '123 Main St',
                orderReceiverContact: '123-456-7890',
                orderItems: ['Item 1', 'Item 2'],
                orderPrice: 100,
                orderStatus: 'Pending',
            };
            jest.spyOn(appService, 'findOrder').mockResolvedValueOnce(order);
            const result = await appController.getOrderById(orderId);
            expect(result).toEqual(order);
        });
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxkaW51a1xcRGVza3RvcFxcTXkgRG9jc1xcUHJvamVjdHNcXFRyYWRlYXN5XFxUcmFkZWFzeS1CYWNrZW5kXFxvcmRlcl9tYW5hZ2VtZW50XFxzcmNcXGFwcC5jb250cm9sbGVyLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBdUM7QUFDdkMscURBQWlEO0FBQ2pELCtDQUEyQztBQU0zQyxRQUFRLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRTtJQUM3QixJQUFJLGFBQTRCLENBQUM7SUFDakMsSUFBSSxVQUFzQixDQUFDO0lBRTNCLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNwQixNQUFNLFNBQVMsR0FBRyxNQUFNLGNBQUksQ0FBQyxtQkFBbUIsQ0FBQztZQUMvQyxXQUFXLEVBQUUsQ0FBQyw4QkFBYSxDQUFDO1lBQzVCLFNBQVMsRUFBRSxDQUFDLHdCQUFVLENBQUM7U0FDeEIsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRWIsVUFBVSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQWEsd0JBQVUsQ0FBQyxDQUFDO1FBQ25ELGFBQWEsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFnQiw4QkFBYSxDQUFDLENBQUM7SUFDOUQsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRTtRQUM1QixFQUFFLENBQUMsd0JBQXdCLEVBQUUsS0FBSyxJQUFJLEVBQUU7WUFDdEMsTUFBTSxRQUFRLEdBQWE7Z0JBQ3pCLE9BQU8sRUFBRSxDQUFDO2dCQUNWLGlCQUFpQixFQUFFLFVBQVU7Z0JBQzdCLG9CQUFvQixFQUFFLGFBQWE7Z0JBQ25DLG9CQUFvQixFQUFFLGNBQWM7Z0JBQ3BDLFVBQVUsRUFBRSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUM7Z0JBQ2hDLFVBQVUsRUFBRSxHQUFHO2dCQUNmLFdBQVcsRUFBRSxTQUFTO2FBQ3ZCLENBQUM7WUFFRixJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxRQUFlLENBQUMsQ0FBQztZQUU5RSxNQUFNLE1BQU0sR0FBRyxNQUFNLGFBQWEsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDMUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUU7UUFDNUIsRUFBRSxDQUFDLDhCQUE4QixFQUFFLEtBQUssSUFBSSxFQUFFO1lBQzVDLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQztZQUNsQixNQUFNLEtBQUssR0FBYTtnQkFDdEIsT0FBTztnQkFDUCxpQkFBaUIsRUFBRSxVQUFVO2dCQUM3QixvQkFBb0IsRUFBRSxhQUFhO2dCQUNuQyxvQkFBb0IsRUFBRSxjQUFjO2dCQUNwQyxVQUFVLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO2dCQUNoQyxVQUFVLEVBQUUsR0FBRztnQkFDZixXQUFXLEVBQUUsU0FBUzthQUN2QixDQUFDO1lBRUYsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUMscUJBQXFCLENBQUMsS0FBWSxDQUFDLENBQUM7WUFFeEUsTUFBTSxNQUFNLEdBQUcsTUFBTSxhQUFhLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3pELE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUdILFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDYixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyJDOlxcVXNlcnNcXGRpbnVrXFxEZXNrdG9wXFxNeSBEb2NzXFxQcm9qZWN0c1xcVHJhZGVhc3lcXFRyYWRlYXN5LUJhY2tlbmRcXG9yZGVyX21hbmFnZW1lbnRcXHNyY1xcYXBwLmNvbnRyb2xsZXIuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUZXN0IH0gZnJvbSAnQG5lc3Rqcy90ZXN0aW5nJztcclxuaW1wb3J0IHsgQXBwQ29udHJvbGxlciB9IGZyb20gJy4vYXBwLmNvbnRyb2xsZXInO1xyXG5pbXBvcnQgeyBBcHBTZXJ2aWNlIH0gZnJvbSAnLi9hcHAuc2VydmljZSc7XHJcbmltcG9ydCB7IE9yZGVyRFRPIH0gZnJvbSAnLi9EVE8vT3JkZXJEVE8nO1xyXG5pbXBvcnQgeyBVcGRhdGVPcmRlckRUTyB9IGZyb20gJy4vRFRPL1VwZGF0ZU9yZGVyRFRPJztcclxuaW1wb3J0IHsgUHVyY2hhc2VPcmRlckRUTywgVXBkYXRlUHVyY2hhc2VPcmRlckRUTyB9IGZyb20gJy4vRFRPL3B1cmNoYXNlT3JkZXJEVE8nO1xyXG5cclxuXHJcbmRlc2NyaWJlKCdBcHBDb250cm9sbGVyJywgKCkgPT4ge1xyXG4gIGxldCBhcHBDb250cm9sbGVyOiBBcHBDb250cm9sbGVyO1xyXG4gIGxldCBhcHBTZXJ2aWNlOiBBcHBTZXJ2aWNlO1xyXG5cclxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcclxuICAgIGNvbnN0IG1vZHVsZVJlZiA9IGF3YWl0IFRlc3QuY3JlYXRlVGVzdGluZ01vZHVsZSh7XHJcbiAgICAgIGNvbnRyb2xsZXJzOiBbQXBwQ29udHJvbGxlcl0sXHJcbiAgICAgIHByb3ZpZGVyczogW0FwcFNlcnZpY2VdLFxyXG4gICAgfSkuY29tcGlsZSgpO1xyXG5cclxuICAgIGFwcFNlcnZpY2UgPSBtb2R1bGVSZWYuZ2V0PEFwcFNlcnZpY2U+KEFwcFNlcnZpY2UpO1xyXG4gICAgYXBwQ29udHJvbGxlciA9IG1vZHVsZVJlZi5nZXQ8QXBwQ29udHJvbGxlcj4oQXBwQ29udHJvbGxlcik7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdjcmVhdGVPcmRlcnMnLCAoKSA9PiB7XHJcbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBhbiBvcmRlcicsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3Qgb3JkZXJEdG86IE9yZGVyRFRPID0ge1xyXG4gICAgICAgIG9yZGVySWQ6IDEsXHJcbiAgICAgICAgb3JkZXJSZWNlaXZlck5hbWU6ICdKb2huIERvZScsXHJcbiAgICAgICAgb3JkZXJSZWNlaXZlckFkZHJlc3M6ICcxMjMgTWFpbiBTdCcsXHJcbiAgICAgICAgb3JkZXJSZWNlaXZlckNvbnRhY3Q6ICcxMjMtNDU2LTc4OTAnLFxyXG4gICAgICAgIG9yZGVySXRlbXM6IFsnSXRlbSAxJywgJ0l0ZW0gMiddLFxyXG4gICAgICAgIG9yZGVyUHJpY2U6IDEwMCxcclxuICAgICAgICBvcmRlclN0YXR1czogJ1BlbmRpbmcnLFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgamVzdC5zcHlPbihhcHBTZXJ2aWNlLCAnY3JlYXRlT3JkZXJzJykubW9ja1Jlc29sdmVkVmFsdWVPbmNlKG9yZGVyRHRvIGFzIGFueSk7XHJcblxyXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhcHBDb250cm9sbGVyLmNyZWF0ZU9yZGVycyhvcmRlckR0byk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwob3JkZXJEdG8pO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIGRlc2NyaWJlKCdnZXRPcmRlckJ5SWQnLCAoKSA9PiB7XHJcbiAgICBpdCgnc2hvdWxkIHJldHVybiBhbiBvcmRlciBieSBJRCcsIGFzeW5jICgpID0+IHtcclxuICAgICAgY29uc3Qgb3JkZXJJZCA9IDE7XHJcbiAgICAgIGNvbnN0IG9yZGVyOiBPcmRlckRUTyA9IHtcclxuICAgICAgICBvcmRlcklkLFxyXG4gICAgICAgIG9yZGVyUmVjZWl2ZXJOYW1lOiAnSm9obiBEb2UnLFxyXG4gICAgICAgIG9yZGVyUmVjZWl2ZXJBZGRyZXNzOiAnMTIzIE1haW4gU3QnLFxyXG4gICAgICAgIG9yZGVyUmVjZWl2ZXJDb250YWN0OiAnMTIzLTQ1Ni03ODkwJyxcclxuICAgICAgICBvcmRlckl0ZW1zOiBbJ0l0ZW0gMScsICdJdGVtIDInXSxcclxuICAgICAgICBvcmRlclByaWNlOiAxMDAsXHJcbiAgICAgICAgb3JkZXJTdGF0dXM6ICdQZW5kaW5nJyxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGplc3Quc3B5T24oYXBwU2VydmljZSwgJ2ZpbmRPcmRlcicpLm1vY2tSZXNvbHZlZFZhbHVlT25jZShvcmRlciBhcyBhbnkpO1xyXG5cclxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXBwQ29udHJvbGxlci5nZXRPcmRlckJ5SWQob3JkZXJJZCk7XHJcbiAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwob3JkZXIpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG5cclxuICBhZnRlckVhY2goKCkgPT4ge1xyXG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XHJcbiAgfSk7XHJcbn0pO1xyXG4iXSwidmVyc2lvbiI6M30=