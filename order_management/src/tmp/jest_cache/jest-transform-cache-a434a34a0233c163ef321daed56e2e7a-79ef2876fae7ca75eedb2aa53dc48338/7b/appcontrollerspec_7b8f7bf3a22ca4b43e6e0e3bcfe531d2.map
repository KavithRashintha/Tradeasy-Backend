{"file":"C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\order_management\\src\\app.controller.spec.ts","mappings":";;AAAA,6CAAuC;AACvC,qDAAiD;AACjD,+CAA2C;AAM3C,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC3B,IAAI,aAA4B,CAAC;IACjC,IAAI,UAAsB,CAAC;IAE3B,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,WAAW,GAAG;YAClB,YAAY,EAAE,IAAI,CAAC,EAAE,EAAE;YACvB,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE;YACpB,qCAAqC;SACtC,CAAC;QAEF,MAAM,SAAS,GAAG,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC/C,WAAW,EAAE,CAAC,8BAAa,CAAC;YAC5B,SAAS,EAAE;gBACT,EAAE,OAAO,EAAE,wBAAU,EAAE,QAAQ,EAAE,WAAW,EAAE;gBAC9C,6CAA6C;aAC9C;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,UAAU,GAAG,SAAS,CAAC,GAAG,CAAa,wBAAU,CAAC,CAAC;QACnD,aAAa,GAAG,SAAS,CAAC,GAAG,CAAgB,8BAAa,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,wBAAwB,EAAE,KAAK,IAAI,EAAE;YACtC,MAAM,QAAQ,GAAa;gBACzB,OAAO,EAAE,CAAC;gBACV,iBAAiB,EAAE,UAAU;gBAC7B,oBAAoB,EAAE,aAAa;gBACnC,oBAAoB,EAAE,cAAc;gBACpC,UAAU,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC;gBAChC,UAAU,EAAE,GAAG;gBACf,WAAW,EAAE,SAAS;aACvB,CAAC;YAED,UAAU,CAAC,YAA0B,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;YAEvE,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;YAC1D,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAGH,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\order_management\\src\\app.controller.spec.ts"],"sourcesContent":["import { Test } from '@nestjs/testing';\r\nimport { AppController } from './app.controller';\r\nimport { AppService } from './app.service';\r\nimport { OrderDTO } from './DTO/OrderDTO';\r\nimport { UpdateOrderDTO } from './DTO/UpdateOrderDTO';\r\nimport { PurchaseOrderDTO, UpdatePurchaseOrderDTO } from './DTO/purchaseOrderDTO';\r\n\r\n\r\ndescribe('AppController', () => {\r\n    let appController: AppController;\r\n    let appService: AppService;\r\n  \r\n    beforeEach(async () => {\r\n      const mockService = {\r\n        createOrders: jest.fn(),\r\n        findOrder: jest.fn(),\r\n        // Add other mocked methods as needed\r\n      };\r\n  \r\n      const moduleRef = await Test.createTestingModule({\r\n        controllers: [AppController],\r\n        providers: [\r\n          { provide: AppService, useValue: mockService },\r\n          // Add other providers/mock dependencies here\r\n        ],\r\n      }).compile();\r\n  \r\n      appService = moduleRef.get<AppService>(AppService);\r\n      appController = moduleRef.get<AppController>(AppController);\r\n    });\r\n  \r\n    describe('createOrders', () => {\r\n      it('should create an order', async () => {\r\n        const orderDto: OrderDTO = {\r\n          orderId: 1,\r\n          orderReceiverName: 'John Doe',\r\n          orderReceiverAddress: '123 Main St',\r\n          orderReceiverContact: '123-456-7890',\r\n          orderItems: ['Item 1', 'Item 2'],\r\n          orderPrice: 100,\r\n          orderStatus: 'Pending',\r\n        };\r\n  \r\n        (appService.createOrders as jest.Mock).mockResolvedValueOnce(orderDto);\r\n  \r\n        const result = await appController.createOrders(orderDto);\r\n        expect(result).toEqual(orderDto);\r\n      });\r\n    });\r\n  \r\n  \r\n    afterEach(() => {\r\n      jest.clearAllMocks();\r\n    });\r\n  });"],"version":3}