{"file":"C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\customer_management\\src\\app.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\customer_management\\src\\app.service.ts"],"sourcesContent":["import { Injectable, BadRequestException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Customer } from './customer.entity';\r\nimport { Repository } from 'typeorm';\r\nimport {CustomerDTO} from './dto/CustomerDTO';\r\nimport { GetCustomerDTO } from './dto/GetCustomerDTO';\r\nimport { UpdateCustomerDTO } from './dto/UpdateCustomerDTO';\r\nimport { ILike } from \"typeorm\";\r\nimport { Query } from 'express-serve-static-core';\r\nimport * as bcrypt from 'bcrypt';\r\n\r\n\r\n@Injectable()\r\nexport class AppService {\r\n  \r\n  constructor(\r\n      @InjectRepository(Customer)\r\n      private readonly customerRepository: Repository<Customer>,\r\n  ) {}\r\n\r\n  async createCustomer(createCustomerDTO: CustomerDTO): Promise<Customer> {\r\n    const saltOrRounds = 10;\r\n    const hash = await bcrypt.hash(createCustomerDTO.password, saltOrRounds);\r\n    const newCustomer = this.customerRepository.create({\r\n       ...createCustomerDTO,\r\n        password: hash,\r\n        lastLogin: new Date()\r\n    });\r\n\r\n    console.log(\"cus.service\",newCustomer);\r\n    return await this.customerRepository.save(newCustomer);\r\n  }\r\n\r\n  async updateLastLogin(id: number, updateCustomerDto: Partial<UpdateCustomerDTO>): Promise<Customer> {\r\n    await this.customerRepository.update(id, updateCustomerDto);\r\n    return await this.customerRepository.findOneById(id);\r\n  }\r\n\r\n  async findCustomer(id:any): Promise<Customer | null>{\r\n    return await this.customerRepository.findOneById(id);\r\n  }\r\n\r\n  async findCustomerByUsername(username:string): Promise<Customer | null>{\r\n    console.log('service.usn:',username);\r\n    return await this.customerRepository.findOne({ where: { username } });\r\n  }\r\n\r\n\r\n  async getAllCustomers():Promise<Customer[]>{\r\n    return await this.customerRepository.find();\r\n  }\r\n\r\n  async updateCustomer(id: number, updateCustomerDto: UpdateCustomerDTO): Promise<Customer> {\r\n    await this.customerRepository.update(id, updateCustomerDto);\r\n    return await this.customerRepository.findOneById(id);\r\n  }\r\n  \r\n  async deleteCustomer(id: number){\r\n    const result = await this.customerRepository.delete(id);\r\n    if(!result){\r\n      return \"Not Deleted\";\r\n    }else{\r\n      return \"Successfully Deleted\";\r\n    }\r\n  }\r\n\r\n  async searchAllCustomers(query: Query): Promise<Customer[]> {\r\n    console.log('Received query:', query);\r\n    const keyword = (query.query as { keyword?: string }).keyword;\r\n    try {\r\n      const filteredCustomers = await this.customerRepository.find({ where: { username: ILike(`%${keyword}%`) } });\r\n      console.log('Filtered customers:', filteredCustomers);\r\n      return filteredCustomers;\r\n    } catch (error) {\r\n      console.error('Error occurred while searching customers:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async getActiveCustomers(){\r\n    //return await this.customerRepository.find({where:{isActive:true}});\r\n    return await this.customerRepository.count();\r\n  }\r\n}\r\n"],"version":3}