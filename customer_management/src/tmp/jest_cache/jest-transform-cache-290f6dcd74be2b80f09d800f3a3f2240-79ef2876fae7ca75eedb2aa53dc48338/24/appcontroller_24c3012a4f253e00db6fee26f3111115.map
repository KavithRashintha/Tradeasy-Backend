{"file":"C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\customer_management\\src\\app.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\customer_management\\src\\app.controller.ts"],"sourcesContent":["import {Controller, Get, Param, } from '@nestjs/common';\r\nimport { AppService } from './app.service';\r\nimport { MessagePattern, Payload } from '@nestjs/microservices';\r\nimport {CustomerDTO} from './dto/CustomerDTO';\r\nimport { Customer } from './customer.entity';\r\nimport { GetCustomerDTO } from './dto/GetCustomerDTO';\r\nimport { UpdateCustomerDTO } from './dto/UpdateCustomerDTO';\r\nimport * as bcrypt from 'bcrypt'\r\nimport { Query } from 'express-serve-static-core';\r\n\r\n@Controller()\r\nexport class AppController {\r\n  constructor(private readonly customerManagement: AppService) {}\r\n\r\n  @MessagePattern({ cmd: 'CREATE_CUSTOMER' })\r\n  async createCustomer(createCustomerDto: CustomerDTO): Promise<Customer> {\r\n    console.log(\"cus.controller\",createCustomerDto);\r\n    return await this.customerManagement.createCustomer(createCustomerDto);\r\n  }\r\n\r\n  @MessagePattern({  cmd: 'UPDATE_LAST_LOGIN' })\r\n  async updateLastLogin(@Payload() data: { id: number, lastLogin: Date }): Promise<Customer> {\r\n    const { id, lastLogin } = data;\r\n    console.log(\"cus.controller\",data);\r\n    return await this.customerManagement.updateLastLogin(id, {lastLogin});\r\n  }\r\n\r\n  @MessagePattern({ cmd: 'GET_CUSTOMER' })\r\n  async getCustomerById(\r\n      @Payload() id:any\r\n  ): Promise<Customer | null> {\r\n    return await this.customerManagement.findCustomer(id);\r\n  }\r\n\r\n  @MessagePattern({ cmd: 'GET_CUSTOMER_BY_USERNAME' })\r\n  async getCustomerByUsername(\r\n      @Payload() username:any\r\n  ): Promise<Customer | null> {\r\n    console.log('controller.usn:',username);\r\n    return await this.customerManagement.findCustomerByUsername(username);\r\n  }\r\n\r\n  @MessagePattern({cmd: 'GET_ALL_CUSTOMERS'})\r\n  async getAllCustomers(): Promise<Customer[]>{\r\n    return await this.customerManagement.getAllCustomers();\r\n  }\r\n  \r\n  @MessagePattern({cmd: 'UPDATE_CUSTOMER'})\r\n  async updateCustomer(@Payload() data: { id: number, updateCustomerDto: UpdateCustomerDTO }): Promise<Customer> {\r\n    const { id, updateCustomerDto } = data;\r\n    return await this.customerManagement.updateCustomer(id, updateCustomerDto);\r\n  }\r\n\r\n  @MessagePattern({cmd: 'DELETE_CUSTOMER'})\r\n  async deleteCustomer(@Payload() id:number){\r\n    return await this.customerManagement.deleteCustomer(id);\r\n  }\r\n\r\n  @MessagePattern({cmd: 'SEARCH_ALL_CUSTOMERS'})\r\n  async searchAllCustomers(@Payload() query: Query): Promise<Customer[]>{\r\n    return await this.customerManagement.searchAllCustomers(query);\r\n  }\r\n\r\n  @MessagePattern({cmd: 'GET_ACTIVE_CUSTOMERS'})\r\n  async getActiveCustomers(){\r\n    return await this.customerManagement.getActiveCustomers();\r\n  }\r\n}\r\n"],"version":3}