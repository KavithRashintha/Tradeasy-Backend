{"file":"C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\customer_management\\src\\app.controller.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,qDAAiD;AACjD,+CAA2C;AAK3C,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC3B,IAAI,aAA4B,CAAC;IACjC,IAAI,UAAsB,CAAC;IAE3B,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,WAAW,EAAE,CAAC,8BAAa,CAAC;YAC5B,SAAS,EAAE,CAAC,wBAAU,CAAC;SACxB,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,UAAU,GAAG,MAAM,CAAC,GAAG,CAAa,wBAAU,CAAC,CAAC;QAChD,aAAa,GAAG,MAAM,CAAC,GAAG,CAAgB,8BAAa,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;YAC5C,MAAM,iBAAiB,GAAgB;gBACrC,EAAE,EAAE,CAAC;gBACL,QAAQ,EAAE,UAAU;gBACpB,QAAQ,EAAE,cAAc;gBACxB,KAAK,EAAE,kBAAkB;gBACzB,SAAS,EAAE,YAAY;gBACvB,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE,aAAa;gBACtB,cAAc,EAAE,aAAa;aAC9B,CAAC;YAEF,MAAM,cAAc,GAAa;gBAC/B,EAAE,EAAE,CAAC;gBACL,QAAQ,EAAE,UAAU;gBACpB,QAAQ,EAAE,cAAc,EAAE,8CAA8C;gBACxE,KAAK,EAAE,kBAAkB;gBACzB,SAAS,EAAE,YAAY;gBACvB,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE,aAAa;gBACtB,cAAc,EAAE,aAAa;gBAC7B,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;YAE/E,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;YACrE,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,QAAQ,GAAG;gBACf,EAAE,EAAE,CAAC;gBACL,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC;YAEF,MAAM,cAAc,GAAa;gBAC/B,EAAE,EAAE,CAAC;gBACL,QAAQ,EAAE,UAAU;gBACpB,QAAQ,EAAE,cAAc;gBACxB,KAAK,EAAE,kBAAkB;gBACzB,SAAS,EAAE,YAAY;gBACvB,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE,aAAa;gBACtB,cAAc,EAAE,aAAa;gBAC7B,SAAS,EAAE,QAAQ,CAAC,SAAS;aAC9B,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;YAEhF,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAC7D,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YAChD,MAAM,UAAU,GAAG,CAAC,CAAC;YACrB,MAAM,gBAAgB,GAAa;gBACjC,EAAE,EAAE,CAAC;gBACL,QAAQ,EAAE,UAAU;gBACpB,QAAQ,EAAE,cAAc,EAAE,8CAA8C;gBACxE,KAAK,EAAE,kBAAkB;gBACzB,SAAS,EAAE,YAAY;gBACvB,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE,aAAa;gBACtB,cAAc,EAAE,aAAa;gBAC7B,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC;YAE/E,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;YAC/D,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACrC,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,QAAQ,GAAG,UAAU,CAAC;YAC5B,MAAM,gBAAgB,GAAa;gBACjC,EAAE,EAAE,CAAC;gBACL,QAAQ,EAAE,UAAU;gBACpB,QAAQ,EAAE,cAAc,EAAE,8CAA8C;gBACxE,KAAK,EAAE,kBAAkB;gBACzB,SAAS,EAAE,YAAY;gBACvB,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE,aAAa;gBACtB,cAAc,EAAE,aAAa;gBAC7B,SAAS,EAAE,IAAI,IAAI,EAAE;aACtB,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,wBAAwB,CAAC,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC;YAEzF,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;YACnE,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,MAAM,iBAAiB,GAAe;gBACpC;oBACE,EAAE,EAAE,CAAC;oBACL,QAAQ,EAAE,WAAW;oBACrB,QAAQ,EAAE,eAAe,EAAE,8CAA8C;oBACzE,KAAK,EAAE,mBAAmB;oBAC1B,SAAS,EAAE,YAAY;oBACvB,IAAI,EAAE,MAAM;oBACZ,OAAO,EAAE,aAAa;oBACtB,cAAc,EAAE,cAAc;oBAC9B,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB;gBACD;oBACE,EAAE,EAAE,CAAC;oBACL,QAAQ,EAAE,WAAW;oBACrB,QAAQ,EAAE,eAAe,EAAE,8CAA8C;oBACzE,KAAK,EAAE,mBAAmB;oBAC1B,SAAS,EAAE,YAAY;oBACvB,IAAI,EAAE,OAAO;oBACb,OAAO,EAAE,aAAa;oBACtB,cAAc,EAAE,cAAc;oBAC9B,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB;aACF,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;YAEnF,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,eAAe,EAAE,CAAC;YACrD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;YACxC,MAAM,QAAQ,GAAG;gBACf,EAAE,EAAE,CAAC;gBACL,iBAAiB,EAAE;oBACjB,KAAK,EAAE,qBAAqB;oBAC5B,SAAS,EAAE,IAAI,IAAI,EAAE;oBACrB,sDAAsD;iBAClC;aACvB,CAAC;YAEF,MAAM,cAAc,GAAa;gBAC/B,EAAE,EAAE,CAAC;gBACL,QAAQ,EAAE,UAAU;gBACpB,QAAQ,EAAE,cAAc,EAAE,8CAA8C;gBACxE,KAAK,EAAE,qBAAqB;gBAC5B,SAAS,EAAE,YAAY;gBACvB,IAAI,EAAE,MAAM;gBACZ,OAAO,EAAE,aAAa;gBACtB,cAAc,EAAE,aAAa;gBAC7B,SAAS,EAAE,QAAQ,CAAC,iBAAiB,CAAC,SAAS;aAChD,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;YAE/E,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YAC5D,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC9B,EAAE,CAAC,gCAAgC,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,UAAU,GAAG,CAAC,CAAC;YAErB,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;YAE1E,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;YAC9D,MAAM,CAAC,MAAM,CAAC,CAAC,aAAa,EAAE,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAClC,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACtD,MAAM,KAAK,GAAQ;YACjB,oCAAoC;aACrC,CAAC;YAEF,MAAM,iBAAiB,GAAe;gBACpC;oBACE,EAAE,EAAE,CAAC;oBACL,QAAQ,EAAE,WAAW;oBACrB,QAAQ,EAAE,eAAe,EAAE,8CAA8C;oBACzE,KAAK,EAAE,mBAAmB;oBAC1B,SAAS,EAAE,YAAY;oBACvB,IAAI,EAAE,MAAM;oBACZ,OAAO,EAAE,aAAa;oBACtB,cAAc,EAAE,cAAc;oBAC9B,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB;gBACD;oBACE,EAAE,EAAE,CAAC;oBACL,QAAQ,EAAE,WAAW;oBACrB,QAAQ,EAAE,eAAe,EAAE,8CAA8C;oBACzE,KAAK,EAAE,mBAAmB;oBAC1B,SAAS,EAAE,YAAY;oBACvB,IAAI,EAAE,OAAO;oBACb,OAAO,EAAE,aAAa;oBACtB,cAAc,EAAE,cAAc;oBAC9B,SAAS,EAAE,IAAI,IAAI,EAAE;iBACtB;aACF,CAAC;YAEF,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,oBAAoB,CAAC,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;YAEtF,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;YAC7D,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAChC,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;YAChD,MAAM,iBAAiB,GAAG,CAAC,CAAC;YAC5B,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,oBAAoB,CAAC,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;YAEtF,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,kBAAkB,EAAE,CAAC;YACxD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\customer_management\\src\\app.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { AppController } from './app.controller';\r\nimport { AppService } from './app.service';\r\nimport { CustomerDTO } from './dto/CustomerDTO';\r\nimport { UpdateCustomerDTO } from './dto/UpdateCustomerDTO';\r\nimport { Customer } from './customer.entity';\r\n\r\ndescribe('AppController', () => {\r\n    let appController: AppController;\r\n    let appService: AppService;\r\n  \r\n    beforeEach(async () => {\r\n      const module: TestingModule = await Test.createTestingModule({\r\n        controllers: [AppController],\r\n        providers: [AppService],\r\n      }).compile();\r\n  \r\n      appService = module.get<AppService>(AppService);\r\n      appController = module.get<AppController>(AppController);\r\n    });\r\n  \r\n    afterEach(() => {\r\n      jest.clearAllMocks();\r\n    });\r\n  \r\n    describe('createCustomer', () => {\r\n      it('should create a new customer', async () => {\r\n        const createCustomerDto: CustomerDTO = {\r\n          id: 1,\r\n          username: 'testuser',\r\n          password: 'testpassword',\r\n          email: 'test@example.com',\r\n          contactNo: '1234567890',\r\n          role: 'user',\r\n          address: '123 Test St',\r\n          profilePicture: 'profile.jpg',\r\n        };\r\n  \r\n        const expectedResult: Customer = {\r\n          id: 1,\r\n          username: 'testuser',\r\n          password: 'testpassword', // Include password here for type completeness\r\n          email: 'test@example.com',\r\n          contactNo: '1234567890',\r\n          role: 'user',\r\n          address: '123 Test St',\r\n          profilePicture: 'profile.jpg',\r\n          lastLogin: new Date()\r\n        };\r\n  \r\n        jest.spyOn(appService, 'createCustomer').mockResolvedValueOnce(expectedResult);\r\n  \r\n        const result = await appController.createCustomer(createCustomerDto);\r\n        expect(result).toEqual(expectedResult);\r\n      });\r\n    });\r\n  \r\n    describe('updateLastLogin', () => {\r\n      it('should update last login for a customer', async () => {\r\n        const mockData = {\r\n          id: 1,\r\n          lastLogin: new Date(),\r\n        };\r\n  \r\n        const expectedResult: Customer = {\r\n          id: 1,\r\n          username: 'testuser',\r\n          password: 'testpassword', \r\n          email: 'test@example.com',\r\n          contactNo: '1234567890',\r\n          role: 'user',\r\n          address: '123 Test St',\r\n          profilePicture: 'profile.jpg',\r\n          lastLogin: mockData.lastLogin,\r\n        };\r\n  \r\n        jest.spyOn(appService, 'updateLastLogin').mockResolvedValueOnce(expectedResult);\r\n  \r\n        const result = await appController.updateLastLogin(mockData);\r\n        expect(result).toEqual(expectedResult);\r\n      });\r\n    });\r\n  \r\n    describe('getCustomerById', () => {\r\n      it('should retrieve a customer by ID', async () => {\r\n        const customerId = 1;\r\n        const expectedCustomer: Customer = {\r\n          id: 1,\r\n          username: 'testuser',\r\n          password: 'testpassword', // Include password here for type completeness\r\n          email: 'test@example.com',\r\n          contactNo: '1234567890',\r\n          role: 'user',\r\n          address: '123 Test St',\r\n          profilePicture: 'profile.jpg',\r\n          lastLogin: new Date()\r\n        };\r\n  \r\n        jest.spyOn(appService, 'findCustomer').mockResolvedValueOnce(expectedCustomer);\r\n  \r\n        const result = await appController.getCustomerById(customerId);\r\n        expect(result).toEqual(expectedCustomer);\r\n      });\r\n    });\r\n  \r\n    describe('getCustomerByUsername', () => {\r\n      it('should retrieve a customer by username', async () => {\r\n        const username = 'testuser';\r\n        const expectedCustomer: Customer = {\r\n          id: 1,\r\n          username: 'testuser',\r\n          password: 'testpassword', // Include password here for type completeness\r\n          email: 'test@example.com',\r\n          contactNo: '1234567890',\r\n          role: 'user',\r\n          address: '123 Test St',\r\n          profilePicture: 'profile.jpg',\r\n          lastLogin: new Date()\r\n        };\r\n  \r\n        jest.spyOn(appService, 'findCustomerByUsername').mockResolvedValueOnce(expectedCustomer);\r\n  \r\n        const result = await appController.getCustomerByUsername(username);\r\n        expect(result).toEqual(expectedCustomer);\r\n      });\r\n    });\r\n  \r\n    describe('getAllCustomers', () => {\r\n      it('should retrieve all customers', async () => {\r\n        const expectedCustomers: Customer[] = [\r\n          {\r\n            id: 1,\r\n            username: 'testuser1',\r\n            password: 'testpassword1', // Include password here for type completeness\r\n            email: 'test1@example.com',\r\n            contactNo: '1234567890',\r\n            role: 'user',\r\n            address: '123 Test St',\r\n            profilePicture: 'profile1.jpg',\r\n            lastLogin: new Date()\r\n          },\r\n          {\r\n            id: 2,\r\n            username: 'testuser2',\r\n            password: 'testpassword2', // Include password here for type completeness\r\n            email: 'test2@example.com',\r\n            contactNo: '0987654321',\r\n            role: 'admin',\r\n            address: '456 Test St',\r\n            profilePicture: 'profile2.jpg',\r\n            lastLogin: new Date()\r\n          },\r\n        ];\r\n  \r\n        jest.spyOn(appService, 'getAllCustomers').mockResolvedValueOnce(expectedCustomers);\r\n  \r\n        const result = await appController.getAllCustomers();\r\n        expect(result).toEqual(expectedCustomers);\r\n      });\r\n    });\r\n  \r\n    describe('updateCustomer', () => {\r\n      it('should update a customer', async () => {\r\n        const mockData = {\r\n          id: 1,\r\n          updateCustomerDto: {\r\n            email: 'updated@example.com',\r\n            lastLogin: new Date(),\r\n            // Add other fields to simulate updating customer data\r\n          } as UpdateCustomerDTO,\r\n        };\r\n  \r\n        const expectedResult: Customer = {\r\n          id: 1,\r\n          username: 'testuser',\r\n          password: 'testpassword', // Include password here for type completeness\r\n          email: 'updated@example.com',\r\n          contactNo: '1234567890',\r\n          role: 'user',\r\n          address: '123 Test St',\r\n          profilePicture: 'profile.jpg',\r\n          lastLogin: mockData.updateCustomerDto.lastLogin,\r\n        };\r\n  \r\n        jest.spyOn(appService, 'updateCustomer').mockResolvedValueOnce(expectedResult);\r\n  \r\n        const result = await appController.updateCustomer(mockData);\r\n        expect(result).toEqual(expectedResult);\r\n      });\r\n    });\r\n  \r\n    describe('deleteCustomer', () => {\r\n      it('should delete a customer by ID', async () => {\r\n        const customerId = 1;\r\n  \r\n        jest.spyOn(appService, 'deleteCustomer').mockResolvedValueOnce(undefined);\r\n  \r\n        const result = await appController.deleteCustomer(customerId);\r\n        expect(result).toBeUndefined();\r\n      });\r\n    });\r\n  \r\n    describe('searchAllCustomers', () => {\r\n      it('should search customers based on query', async () => {\r\n        const query: any = {\r\n          // Define your query parameters here\r\n        };\r\n  \r\n        const expectedCustomers: Customer[] = [\r\n          {\r\n            id: 1,\r\n            username: 'testuser1',\r\n            password: 'testpassword1', // Include password here for type completeness\r\n            email: 'test1@example.com',\r\n            contactNo: '1234567890',\r\n            role: 'user',\r\n            address: '123 Test St',\r\n            profilePicture: 'profile1.jpg',\r\n            lastLogin: new Date()\r\n          },\r\n          {\r\n            id: 2,\r\n            username: 'testuser2',\r\n            password: 'testpassword2', // Include password here for type completeness\r\n            email: 'test2@example.com',\r\n            contactNo: '0987654321',\r\n            role: 'admin',\r\n            address: '456 Test St',\r\n            profilePicture: 'profile2.jpg',\r\n            lastLogin: new Date()\r\n          },\r\n        ];\r\n  \r\n        jest.spyOn(appService, 'searchAllCustomers').mockResolvedValueOnce(expectedCustomers);\r\n  \r\n        const result = await appController.searchAllCustomers(query);\r\n        expect(result).toEqual(expectedCustomers);\r\n      });\r\n    });\r\n  \r\n    describe('getActiveCustomers', () => {\r\n        it('should retrieve active customers', async () => {\r\n          const expectedCustomers = 5;\r\n          jest.spyOn(appService, 'getActiveCustomers').mockResolvedValueOnce(expectedCustomers);\r\n      \r\n          const result = await appController.getActiveCustomers();\r\n          expect(result).toEqual(expectedCustomers);\r\n        });\r\n      });\r\n  \r\n  });"],"version":3}