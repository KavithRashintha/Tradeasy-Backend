{"file":"C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\refund_management\\src\\app.controller.ts","mappings":"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","names":[],"sources":["C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\refund_management\\src\\app.controller.ts"],"sourcesContent":["import { Controller, Inject } from '@nestjs/common';\r\nimport { AppService } from './app.service';\r\nimport { ClientProxy, MessagePattern, Payload } from '@nestjs/microservices';\r\nimport { CustomerRefundDTO } from './dto/customerRefundDTO';\r\nimport { updateRefundStatusDTO } from './dto/updateRefundStatusDTO';\r\nimport { InventoryRefundDTO, UpdateInventoryRefundStatusDTO } from './dto/inventoryRefundDTO';\r\nimport { CustomerRefund, InventoryRefund } from './refunds.entity';\r\n\r\n\r\n@Controller()\r\nexport class AppController {\r\n  constructor(\r\n    @Inject('INVENTORY_MANAGEMENT') private inventoryClient:ClientProxy,\r\n    private readonly refundManagement: AppService\r\n  ) {}\r\n\r\n  @MessagePattern({ cmd: 'CREATE_CUSTOMER_REFUND' })\r\n  async createCustomerRefund(\r\n    @Payload() customerRefundDto: CustomerRefundDTO,\r\n  ): Promise<CustomerRefund> {\r\n    return await this.refundManagement.createCustomerRefund(customerRefundDto);\r\n  }\r\n\r\n  @MessagePattern({cmd: 'GET_CUSTOMER_REFUND'})\r\n  async getCustomerRefund(@Payload() id:number):Promise<CustomerRefund> {\r\n    return await this.refundManagement.getCustomerRefund(id);\r\n  }\r\n\r\n  @MessagePattern({ cmd: 'GET_ALL_CUSTOMER_REFUNDS' })\r\n  async getAllCustomerRefunds(): Promise<CustomerRefund[]> {\r\n    return await this.refundManagement.getAllCustomerRefunds();\r\n  }\r\n\r\n  @MessagePattern({cmd: 'DELETE_CUSTOMER_REFUND'})\r\n  async deleteCustomerRefund(@Payload() id:number){\r\n    return await this.refundManagement.deleteCustomerRefund(id);\r\n  }\r\n\r\n  @MessagePattern({cmd: 'GET_CUSTOMER_REFUND_BY_CATEGORY'})\r\n  async getCustomerRefundByStatus(@Payload() refundStatus:string){\r\n    return await this.refundManagement.getCustomerRefundByStatus(refundStatus);\r\n  }\r\n\r\n  @MessagePattern({cmd: 'CALLING_TEST_FUNCTION'})\r\n  async runTestFunction():Promise<any>{\r\n    return await this.inventoryClient.send({cmd: 'TEST_FUNCTION'}, {});\r\n  }\r\n\r\n  @MessagePattern({cmd: 'GET_CUSTOMER_REFUND_COUNT'})\r\n  async getCustomerRefundCount(){\r\n    return await this.refundManagement.getCustomerRefundCount();\r\n  }\r\n  \r\n  @MessagePattern({ cmd: 'UPDATE_REFUND_STATUS' })\r\n  async updateRefundStatus(@Payload() updateRefundStatusDto: updateRefundStatusDTO): Promise<CustomerRefund> {\r\n    return await this.refundManagement.updateRefundStatus(updateRefundStatusDto);\r\n  }\r\n\r\n  @MessagePattern({cmd: 'GET_CUSTOMER_REFUND_BY_CUSTOMER_ID'})\r\n  async getCustomerRefundsByCustomerId(@Payload() customerId: string): Promise<CustomerRefund[]> {\r\n    return await this.refundManagement.getCustomerRefundsByCustomerId(customerId);\r\n  }\r\n\r\n  //==============================================INVENTORY REFUND MANAGEMENT==============================================================\r\n\r\n  @MessagePattern({ cmd: 'CREATE_INVENTORY_REFUND' })\r\n  async createInventoryRefund(@Payload() inventoryRefundDTO: InventoryRefundDTO): Promise<InventoryRefund>{\r\n    return this.refundManagement.createInventoryRefund(inventoryRefundDTO)\r\n  }\r\n\r\n  @MessagePattern({ cmd: 'GET_ALL_INVENTORY_REFUND' })\r\n  async getAllInventoryRefund(): Promise<InventoryRefund[]>{\r\n    return this.refundManagement.getAllInventoryRefund();\r\n  }\r\n\r\n  @MessagePattern({ cmd: 'GET_INVENTORY_REFUND_BY_ID' })\r\n  async getInventoryRefundById(@Payload() inventory_id:number): Promise<InventoryRefund>{\r\n    return this.refundManagement.getInventoryRefundById(inventory_id);\r\n  }\r\n\r\n  @MessagePattern({cmd: 'UPDATE_INVENTORY_REFUND'})\r\n  async updateInventoryRefunds(@Payload() data: { id: number, updateInventoryRefundStatusDTO: UpdateInventoryRefundStatusDTO }): Promise<InventoryRefund> {\r\n    const { id, updateInventoryRefundStatusDTO } = data;\r\n    return await this.refundManagement.updateInventoryRefunds(id, updateInventoryRefundStatusDTO);\r\n  }\r\n\r\n  @MessagePattern({cmd: 'DELETE_INVENTORY_REFUND'})\r\nasync deleteInventoryRefund(@Payload() inventory_id: number) {\r\n    return await this.refundManagement.deleteInventoryRefund(inventory_id);\r\n}\r\n\r\n\r\n  @MessagePattern({cmd: 'GET_ALL_APPROVED_REFUNDS'})\r\n    async getAllApprovedRefunds(): Promise<InventoryRefund[]> {\r\n        return this.refundManagement.getAllApprovedRefunds();\r\n    }\r\n}\r\n \r\n  \r\n  \r\n\r\n"],"version":3}