{"file":"C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\refund_management\\src\\app.controller.spec.ts","mappings":"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","names":[],"sources":["C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\refund_management\\src\\app.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { AppController } from './app.controller';\r\nimport { AppService } from './app.service';\r\nimport { ClientProxy } from '@nestjs/microservices';\r\nimport { CustomerRefundDTO } from './dto/customerRefundDTO';\r\nimport { updateRefundStatusDTO } from './dto/updateRefundStatusDTO';\r\nimport { InventoryRefundDTO, UpdateInventoryRefundStatusDTO } from './dto/inventoryRefundDTO';\r\nimport { CustomerRefund, InventoryRefund } from './refunds.entity';\r\n\r\ndescribe('AppController', () => {\r\n  let appController: AppController;\r\n  let appService: AppService;\r\n  let inventoryClient: ClientProxy;\r\n\r\n  beforeEach(async () => {\r\n    const inventoryClientMock = {\r\n      send: jest.fn(),\r\n    };\r\n\r\n    const app: TestingModule = await Test.createTestingModule({\r\n      controllers: [AppController],\r\n      providers: [\r\n        {\r\n          provide: AppService,\r\n          useValue: {\r\n            createCustomerRefund: jest.fn(),\r\n            getCustomerRefund: jest.fn(),\r\n            getAllCustomerRefunds: jest.fn(),\r\n            deleteCustomerRefund: jest.fn(),\r\n            getCustomerRefundByStatus: jest.fn(),\r\n            getCustomerRefundCount: jest.fn(),\r\n            updateRefundStatus: jest.fn(),\r\n            getCustomerRefundsByCustomerId: jest.fn(),\r\n            createInventoryRefund: jest.fn(),\r\n            getAllInventoryRefund: jest.fn(),\r\n            getInventoryRefundById: jest.fn(),\r\n            updateInventoryRefunds: jest.fn(),\r\n            deleteInventoryRefund: jest.fn(),\r\n            getAllApprovedRefunds: jest.fn(),\r\n          },\r\n        },\r\n        {\r\n          provide: 'INVENTORY_MANAGEMENT',\r\n          useValue: inventoryClientMock,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    appController = app.get<AppController>(AppController);\r\n    appService = app.get<AppService>(AppService);\r\n    inventoryClient = app.get<ClientProxy>('INVENTORY_MANAGEMENT');\r\n  });\r\n\r\n  describe('createCustomerRefund', () => {\r\n    it('should create a customer refund', async () => {\r\n      const customerRefundDto: CustomerRefundDTO = {\r\n        orderId: 1,\r\n        customerName: 'testCustomer',\r\n        customerId: '123456', \r\n        contact: '123-456-7890',\r\n        item: 'testItem',\r\n        quantity: '2',\r\n        reason: 'defective',\r\n        totalPrice: '100.00',\r\n        createdDate: new Date(),  \r\n        status: 'pending',\r\n      };\r\n      const result = new CustomerRefund();\r\n      jest.spyOn(appService, 'createCustomerRefund').mockResolvedValue(result);\r\n\r\n      expect(await appController.createCustomerRefund(customerRefundDto)).toBe(result);\r\n    });\r\n  });\r\n\r\n  describe('getCustomerRefund', () => {\r\n    it('should return a customer refund by id', async () => {\r\n      const id = 1;\r\n      const result = new CustomerRefund();\r\n      jest.spyOn(appService, 'getCustomerRefund').mockResolvedValue(result);\r\n\r\n      expect(await appController.getCustomerRefund(id)).toBe(result);\r\n    });\r\n  });\r\n\r\n  describe('getAllCustomerRefunds', () => {\r\n    it('should return all customer refunds', async () => {\r\n      const result = [new CustomerRefund()];\r\n      jest.spyOn(appService, 'getAllCustomerRefunds').mockResolvedValue(result);\r\n\r\n      expect(await appController.getAllCustomerRefunds()).toBe(result);\r\n    });\r\n  });\r\n\r\n  describe('deleteCustomerRefund', () => {\r\n    it('should delete a customer refund', async () => {\r\n      const id = 1;\r\n      const result = 'Successfully Deleted';\r\n      jest.spyOn(appService, 'deleteCustomerRefund').mockResolvedValue(result);\r\n\r\n      expect(await appController.deleteCustomerRefund(id)).toBe(result);\r\n    });\r\n  });\r\n\r\n  describe('getCustomerRefundByStatus', () => {\r\n    it('should return customer refunds by status', async () => {\r\n      const refundStatus = 'approved';\r\n      const result = [new CustomerRefund()];\r\n      jest.spyOn(appService, 'getCustomerRefundByStatus').mockResolvedValue(result);\r\n\r\n      expect(await appController.getCustomerRefundByStatus(refundStatus)).toBe(result);\r\n    });\r\n  });\r\n\r\n  describe('getCustomerRefundCount', () => {\r\n    it('should return the customer refund count', async () => {\r\n      const result = 5;\r\n      jest.spyOn(appService, 'getCustomerRefundCount').mockResolvedValue(result);\r\n\r\n      expect(await appController.getCustomerRefundCount()).toBe(result);\r\n    });\r\n  });\r\n\r\n  describe('updateRefundStatus', () => {\r\n    it('should update the refund status', async () => {\r\n      const updateRefundStatusDto: updateRefundStatusDTO = {\r\n        id: 1,\r\n        status: 'testStatus',\r\n        denialReason: 'testReason'\r\n      };\r\n      const result = new CustomerRefund();\r\n      jest.spyOn(appService, 'updateRefundStatus').mockResolvedValue(result);\r\n\r\n      expect(await appController.updateRefundStatus(updateRefundStatusDto)).toBe(result);\r\n    });\r\n  });\r\n\r\n  describe('createInventoryRefund', () => {\r\n    it('should create an inventory refund', async () => {\r\n      const inventoryRefundDTO: InventoryRefundDTO = {\r\n        orderId: '1',  // Should be a string or number, adjust based on your data type\r\n        supplierName: 'Supplier ABC',\r\n        supplierId: '123456',\r\n        item: 'Test Item',\r\n        quantity: '2',\r\n        price: '50.00',\r\n        reason: 'Damaged during shipping',\r\n        createdDate: new Date(),  // Should be an instance of Date\r\n      };\r\n  \r\n      const result = new InventoryRefund();\r\n      jest.spyOn(appService, 'createInventoryRefund').mockResolvedValue(result);\r\n  \r\n      expect(await appController.createInventoryRefund(inventoryRefundDTO)).toBe(result);\r\n    });\r\n  });\r\n  \r\n\r\n  describe('getAllInventoryRefund', () => {\r\n    it('should return all inventory refunds', async () => {\r\n      const result = [new InventoryRefund()];\r\n      jest.spyOn(appService, 'getAllInventoryRefund').mockResolvedValue(result);\r\n\r\n      expect(await appController.getAllInventoryRefund()).toBe(result);\r\n    });\r\n  });\r\n\r\n  describe('getInventoryRefundById', () => {\r\n    it('should return an inventory refund by id', async () => {\r\n      const inventory_id = 1;\r\n      const result = new InventoryRefund();\r\n      jest.spyOn(appService, 'getInventoryRefundById').mockResolvedValue(result);\r\n\r\n      expect(await appController.getInventoryRefundById(inventory_id)).toBe(result);\r\n    });\r\n  });\r\n\r\n  describe('updateInventoryRefunds', () => {\r\n    it('should update an inventory refund', async () => {\r\n      const data = { id: 1, updateInventoryRefundStatusDTO: new UpdateInventoryRefundStatusDTO() };\r\n      const result = new InventoryRefund();\r\n      jest.spyOn(appService, 'updateInventoryRefunds').mockResolvedValue(result);\r\n\r\n      expect(await appController.updateInventoryRefunds(data)).toBe(result);\r\n    });\r\n  });\r\n\r\n  describe('deleteInventoryRefund', () => {\r\n    it('should delete an inventory refund', async () => {\r\n      const inventory_id = 1;\r\n      const result = 'Successfully Deleted';\r\n      jest.spyOn(appService, 'deleteInventoryRefund').mockResolvedValue(result);\r\n\r\n      expect(await appController.deleteInventoryRefund(inventory_id)).toBe(result);\r\n    });\r\n  });\r\n\r\n  describe('getAllApprovedRefunds', () => {\r\n    it('should return all approved inventory refunds', async () => {\r\n      const result = [new InventoryRefund()];\r\n      jest.spyOn(appService, 'getAllApprovedRefunds').mockResolvedValue(result);\r\n\r\n      expect(await appController.getAllApprovedRefunds()).toBe(result);\r\n    });\r\n  });\r\n});\r\n"],"version":3}