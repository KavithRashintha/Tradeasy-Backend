{"file":"C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\refund_management\\src\\app.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\refund_management\\src\\app.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { CustomerRefund, InventoryRefund } from './refunds.entity';\r\nimport { Repository } from 'typeorm';\r\nimport { CustomerRefundDTO } from './dto/customerRefundDTO';\r\nimport { updateRefundStatusDTO } from './dto/updateRefundStatusDTO';\r\nimport { InventoryRefundDTO, UpdateInventoryRefundStatusDTO } from './dto/inventoryRefundDTO';\r\n\r\n\r\n@Injectable()\r\nexport class AppService {\r\n  constructor(\r\n    @InjectRepository(CustomerRefund)\r\n    private readonly customerRefundRepository: Repository<CustomerRefund>,\r\n\r\n    @InjectRepository(InventoryRefund)\r\n    private readonly inventoryRefundRepository: Repository<InventoryRefund>,\r\n  ) {}\r\n\r\n  async createCustomerRefund(\r\n    customerRefundDto: CustomerRefundDTO,\r\n  ): Promise<CustomerRefund> {\r\n    const newCustomerRefund = this.customerRefundRepository.create(customerRefundDto);\r\n    return await this.customerRefundRepository.save(newCustomerRefund);\r\n  }\r\n\r\n  async getCustomerRefund(id:number):Promise<CustomerRefund> {\r\n    return await this.customerRefundRepository.findOneById(id);\r\n  }\r\n\r\n  async getAllCustomerRefunds(): Promise<CustomerRefund[]> {\r\n    return await this.customerRefundRepository.find();\r\n  }\r\n\r\n  async deleteCustomerRefund(id:number){\r\n    const result = await this.customerRefundRepository.delete(id);\r\n    if (!result) {\r\n      return 'Not Deleted';\r\n    } else {\r\n      return 'Successfully Deleted';\r\n    }\r\n  }\r\n  async getCustomerRefundByStatus(refundStatus:string):Promise<CustomerRefund[]>{\r\n    return await this.customerRefundRepository\r\n        .createQueryBuilder('customer_refund')\r\n        .where('customer_refund.status = :refundStatus', {refundStatus})\r\n        .getMany();\r\n  }\r\n\r\n  async getCustomerRefundCount(){\r\n    return await this.customerRefundRepository.count();\r\n  }\r\n\r\n  async updateRefundStatus(updateRefundStatusDto: updateRefundStatusDTO): Promise<CustomerRefund> {\r\n    const refund = await this.customerRefundRepository.findOne({ where: { id: updateRefundStatusDto.id } });\r\n    if (!refund) {\r\n      throw new Error('Refund not found');\r\n    }\r\n    refund.status = updateRefundStatusDto.status;\r\n    if (updateRefundStatusDto.status === 'rejected') {\r\n      refund.denialReason = updateRefundStatusDto.denialReason;\r\n    } else {\r\n      refund.denialReason = '';\r\n    }\r\n    return this.customerRefundRepository.save(refund);\r\n  }\r\n\r\n  async getCustomerRefundsByCustomerId(customerId: string): Promise<CustomerRefund[]> {\r\n    return await this.customerRefundRepository.find({ where: { customerId } });\r\n  }\r\n\r\n  //==============================================INVENTORY REFUND MANAGEMENT==============================================================\r\n\r\n  async createInventoryRefund(inventoryRefundDTO:InventoryRefundDTO):Promise<InventoryRefund>{\r\n      \r\n    const newInventoryRefund = this.inventoryRefundRepository.create(inventoryRefundDTO); \r\n    return await this.inventoryRefundRepository.save(newInventoryRefund);\r\n  }\r\n\r\n  async getAllInventoryRefund():Promise<InventoryRefund[]>{\r\n    return await this.inventoryRefundRepository.find();\r\n  }\r\n\r\n  async getInventoryRefundById(inventory_id:number):Promise<InventoryRefund>{\r\n      return await this.inventoryRefundRepository.findOneById(inventory_id);\r\n    }\r\n\r\n    async updateInventoryRefunds(id: number, updateInventoryRefundStatusDTO: UpdateInventoryRefundStatusDTO): Promise<InventoryRefund> {\r\n      await this.inventoryRefundRepository.update(id, updateInventoryRefundStatusDTO);\r\n      return await this.inventoryRefundRepository.findOneById(id);\r\n    }\r\n\r\n    async deleteInventoryRefund(inventory_id:number){\r\n      const result = await this.inventoryRefundRepository.delete(inventory_id);\r\n      if (!result) {\r\n        return 'Not Deleted';\r\n      } else {\r\n        return 'Successfully Deleted';\r\n      }\r\n    }\r\n\r\n    async getAllApprovedRefunds(): Promise<InventoryRefund[]> {\r\n      return await this.inventoryRefundRepository.find({\r\n          where: { status: 'completed' }\r\n      });\r\n    }\r\n  \r\n}\r\n\r\n\r\n\r\n"],"version":3}