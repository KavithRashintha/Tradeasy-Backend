{"file":"C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\mail_sender_service\\src\\app.controller.spec.ts","mappings":";;AAAA,6CAAuC;AACvC,qDAAiD;AACjD,+CAA2C;AAa3C,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,IAAI,aAA4B,CAAC;IACjC,IAAI,UAAsB,CAAC;IAE3B,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,WAAW,GAAG;YAClB,gBAAgB,EAAE,IAAI,CAAC,EAAE,EAAE;YAC3B,0BAA0B,EAAE,IAAI,CAAC,EAAE,EAAE;YACrC,wBAAwB,EAAE,IAAI,CAAC,EAAE,EAAE;YACnC,4BAA4B,EAAE,IAAI,CAAC,EAAE,EAAE;YACvC,4BAA4B,EAAE,IAAI,CAAC,EAAE,EAAE;YACvC,wBAAwB,EAAE,IAAI,CAAC,EAAE,EAAE;YACnC,uBAAuB,EAAE,IAAI,CAAC,EAAE,EAAE;YAClC,uBAAuB,EAAE,IAAI,CAAC,EAAE,EAAE;YAClC,yBAAyB,EAAE,IAAI,CAAC,EAAE,EAAE;SACrC,CAAC;QAEF,MAAM,SAAS,GAAG,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC/C,WAAW,EAAE,CAAC,8BAAa,CAAC;YAC5B,SAAS,EAAE;gBACT,EAAE,OAAO,EAAE,wBAAU,EAAE,QAAQ,EAAE,WAAW,EAAE;aAC/C;SACF,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,UAAU,GAAG,SAAS,CAAC,GAAG,CAAa,wBAAU,CAAC,CAAC;QACnD,aAAa,GAAG,SAAS,CAAC,GAAG,CAAgB,8BAAa,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,EAAE,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC3C,MAAM,eAAe,GAAoB;gBACvC,YAAY,EAAE,cAAc;gBAC5B,YAAY,EAAE,YAAY;gBAC1B,SAAS,EAAE,uBAAuB;gBAClC,aAAa,EAAE,uBAAuB;aACvC,CAAC;YAED,UAAU,CAAC,gBAA8B,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;YAEvE,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;YACrE,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,4BAA4B,EAAE,GAAG,EAAE;QAC1C,EAAE,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YACxD,MAAM,yBAAyB,GAA8B;gBAC3D,YAAY,EAAE,cAAc;gBAC5B,YAAY,EAAE,YAAY;gBAC1B,SAAS,EAAE,uBAAuB;gBAClC,aAAa,EAAE,uBAAuB;aACvC,CAAC;YAED,UAAU,CAAC,0BAAwC,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;YAEjF,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,0BAA0B,CAAC,yBAAyB,CAAC,CAAC;YACzF,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAGH,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\mail_sender_service\\src\\app.controller.spec.ts"],"sourcesContent":["import { Test } from '@nestjs/testing';\r\nimport { AppController } from './app.controller';\r\nimport { AppService } from './app.service';\r\nimport {\r\n  GeneralEmailDTO,\r\n  OrderStatusChangeEmailDTO,\r\n  CustomerWarningEmailDTO,\r\n  CustomerTerminationEmailDTO,\r\n  SupplierTerminationEmailDTO,\r\n  CustomerInvoiceEmailDTO,\r\n  SupplierCredentialsEmailDTO,\r\n  PurchaseOrderStatusEmailDTO,\r\n  InventoryRefundStatusEmailDTO\r\n} from './DTO/emailDTO';\r\n\r\ndescribe('AppController', () => {\r\n  let appController: AppController;\r\n  let appService: AppService;\r\n\r\n  beforeEach(async () => {\r\n    const mockService = {\r\n      sendGeneralEmail: jest.fn(),\r\n      sendOrderStatusChangeEmail: jest.fn(),\r\n      sendCustomerWarningEmail: jest.fn(),\r\n      sendCustomerTerminationEmail: jest.fn(),\r\n      sendSupplierTerminationEmail: jest.fn(),\r\n      sendCustomerInvoiceEmail: jest.fn(),\r\n      sendSupplierCredentials: jest.fn(),\r\n      sendPurchaseOrderStatus: jest.fn(),\r\n      sendInventoryRefundStatus: jest.fn(),\r\n    };\r\n\r\n    const moduleRef = await Test.createTestingModule({\r\n      controllers: [AppController],\r\n      providers: [\r\n        { provide: AppService, useValue: mockService },\r\n      ],\r\n    }).compile();\r\n\r\n    appService = moduleRef.get<AppService>(AppService);\r\n    appController = moduleRef.get<AppController>(AppController);\r\n  });\r\n\r\n  describe('sendGeneralEmail', () => {\r\n    it('should send a general email', async () => {\r\n      const generalEmailDto: GeneralEmailDTO = {\r\n        receiverName: 'testReceiver',\r\n        emailSubject: 'Test Email',\r\n        emailBody: 'This is a test email.',\r\n        receiverEmail: 'recipient@example.com'\r\n      };\r\n\r\n      (appService.sendGeneralEmail as jest.Mock).mockResolvedValueOnce(true);\r\n\r\n      const result = await appController.sendGeneralEmail(generalEmailDto);\r\n      expect(result).toEqual(true);\r\n    });\r\n  });\r\n\r\n  describe('sendOrderStatusChangeEmail', () => {\r\n    it('should send an order status change email', async () => {\r\n      const orderStatusChangeEmailDto: OrderStatusChangeEmailDTO = {\r\n        receiverName: 'testReceiver',\r\n        emailSubject: 'Test Email',\r\n        emailBody: 'This is a test email.',\r\n        receiverEmail: 'recipient@example.com'\r\n      };\r\n\r\n      (appService.sendOrderStatusChangeEmail as jest.Mock).mockResolvedValueOnce(true);\r\n\r\n      const result = await appController.sendOrderStatusChangeEmail(orderStatusChangeEmailDto);\r\n      expect(result).toEqual(true);\r\n    });\r\n  });\r\n\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n});\r\n"],"version":3}