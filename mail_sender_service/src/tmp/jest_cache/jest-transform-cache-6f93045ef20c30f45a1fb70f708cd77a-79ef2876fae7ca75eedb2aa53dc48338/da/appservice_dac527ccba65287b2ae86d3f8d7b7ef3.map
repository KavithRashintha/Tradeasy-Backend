{"file":"C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\mail_sender_service\\src\\app.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\mail_sender_service\\src\\app.service.ts"],"sourcesContent":["import { MailerService } from '@nestjs-modules/mailer';\r\nimport { Injectable } from '@nestjs/common';\r\nimport {\r\n  GeneralEmailDTO,\r\n  OrderStatusChangeEmailDTO,\r\n  CustomerWarningEmailDTO,\r\n  CustomerTerminationEmailDTO,\r\n  SupplierTerminationEmailDTO,\r\n  CustomerInvoiceEmailDTO,\r\n  SupplierCredentialsEmailDTO,\r\n  PurchaseOrderStatusEmailDTO,\r\n  InventoryRefundStatusEmailDTO\r\n} from './DTO/emailDTO';\r\n\r\n@Injectable()\r\nexport class AppService {\r\n  constructor(private mailerService: MailerService) {}\r\n\r\n  async sendGeneralEmail(user: GeneralEmailDTO): Promise<{ success: boolean; message: string }> {\r\n    await this.mailerService.sendMail({\r\n      to: user.receiverEmail,\r\n      subject: user.emailSubject,\r\n      template: './generalTemplate', \r\n      context: {\r\n        subject: user.emailSubject,\r\n        name: user.receiverName,\r\n        body: user.emailBody,\r\n      },\r\n    });\r\n\r\n    // Return a success message\r\n    return {\r\n      success: true,\r\n      message: 'Email sent successfully',\r\n    };\r\n  }\r\n\r\n  async sendOrderStatusChangeEmail(user: OrderStatusChangeEmailDTO): Promise<{ success: boolean; message: string }> {\r\n    await this.mailerService.sendMail({\r\n      to: user.receiverEmail,\r\n      subject: user.emailSubject,\r\n      template: './orderStatusChangedTemplate', \r\n      context: {\r\n        subject: user.emailSubject,\r\n        name: user.receiverName,\r\n        body: user.emailBody,\r\n      },\r\n    });\r\n\r\n    // Return a success message\r\n    return {\r\n      success: true,\r\n      message: 'Email sent successfully',\r\n    };\r\n  }\r\n\r\n  async sendCustomerWarningEmail(user: CustomerWarningEmailDTO): Promise<{ success: boolean; message: string }> {\r\n    await this.mailerService.sendMail({\r\n      to: user.receiverEmail,\r\n      subject: user.emailSubject,\r\n      template: './generalTemplate', \r\n      context: {\r\n        subject: user.emailSubject,\r\n        name: user.receiverName,\r\n        body: user.emailBody,\r\n      },\r\n    });\r\n\r\n    // Return a success message\r\n    return {\r\n      success: true,\r\n      message: 'Email sent successfully',\r\n    };\r\n  }\r\n\r\n  async sendCustomerTerminationEmail(user: CustomerTerminationEmailDTO): Promise<{ success: boolean; message: string }> {\r\n    await this.mailerService.sendMail({\r\n      to: user.receiverEmail,\r\n      subject: user.emailSubject,\r\n      template: './generalTemplate', \r\n      context: {\r\n        subject: user.emailSubject,\r\n        name: user.receiverName,\r\n        body: user.emailBody,\r\n      },\r\n    });\r\n\r\n    // Return a success message\r\n    return {\r\n      success: true,\r\n      message: 'Email sent successfully',\r\n    };\r\n  }\r\n\r\n  async sendSupplierTerminationEmail(user: SupplierTerminationEmailDTO): Promise<{ success: boolean; message: string }> {\r\n    await this.mailerService.sendMail({\r\n      to: user.receiverEmail,\r\n      subject: user.emailSubject,\r\n      template: './generalTemplate', \r\n      context: {\r\n        subject: user.emailSubject,\r\n        name: user.receiverName,\r\n        body: user.emailBody,\r\n      },\r\n    });\r\n\r\n    // Return a success message\r\n    return {\r\n      success: true,\r\n      message: 'Email sent successfully',\r\n    };\r\n  }\r\n\r\n  async sendCustomerInvoiceEmail(user: CustomerInvoiceEmailDTO): Promise<{ success: boolean; message: string }> {\r\n    // Define the mail options\r\n    console.log(user.receiverEmail);\r\n    console.log(user.emailSubject);\r\n    console.log(user.receiverName);\r\n    console.log(user.receiverEmail);\r\n    console.log(user.pdfFilePath);\r\n    const mailOptions: any = {\r\n      to: user.receiverEmail,\r\n      subject: user.emailSubject,\r\n      template: './generalTemplate',\r\n      context: {\r\n          subject: user.emailSubject,\r\n          name: user.receiverName,\r\n          body: user.emailBody,\r\n      },\r\n  };\r\n\r\n  // Check if there is a PDF file path provided and attach it\r\n  if (user.pdfFilePath) {\r\n      mailOptions.attachments = [\r\n          {\r\n              filename: 'invoice.pdf',\r\n              path: user.pdfFilePath,\r\n              contentType: 'application/pdf',\r\n          },\r\n      ];\r\n  }\r\n\r\n  // Send the email\r\n  await this.mailerService.sendMail(mailOptions);\r\n\r\n    // Return a success message\r\n    return {\r\n      success: true,\r\n      message: 'Email sent successfully',\r\n    };\r\n  }\r\n\r\n  async sendSupplierCredentials(user: SupplierCredentialsEmailDTO): Promise<{ success: boolean; message: string }> {\r\n    console.log(user);\r\n    await this.mailerService.sendMail({\r\n      to: user.receiverEmail,\r\n      subject: user.emailSubject,\r\n      template: './generalTemplate', \r\n      context: {\r\n        subject: user.emailSubject,\r\n        name: user.receiverName,\r\n        body: user.emailBody,\r\n      },\r\n    });\r\n\r\n    // Return a success message\r\n    return {\r\n      success: true,\r\n      message: 'Email sent successfully',\r\n    };\r\n  }\r\n\r\n\r\n  async sendPurchaseOrderStatus(user: PurchaseOrderStatusEmailDTO): Promise<{ success: boolean; message: string }> {\r\n    console.log(user);\r\n    await this.mailerService.sendMail({\r\n      to: user.receiverEmail,\r\n      subject: user.emailSubject,\r\n      template: './generalTemplate', \r\n      context: {\r\n        subject: user.emailSubject,\r\n        name: user.receiverName,\r\n        body: user.emailBody,\r\n      },\r\n    });\r\n\r\n    // Return a success message\r\n    return {\r\n      success: true,\r\n      message: 'Email sent successfully',\r\n    };\r\n  }\r\n\r\n  async sendInventoryRefundStatus(user: InventoryRefundStatusEmailDTO): Promise<{ success: boolean; message: string }> {\r\n    console.log(user);\r\n    await this.mailerService.sendMail({\r\n      to: user.receiverEmail,\r\n      subject: user.emailSubject,\r\n      template: './generalTemplate', \r\n      context: {\r\n        subject: user.emailSubject,\r\n        name: user.receiverName,\r\n        body: user.emailBody,\r\n      },\r\n    });\r\n\r\n    // Return a success message\r\n    return {\r\n      success: true,\r\n      message: 'Email sent successfully',\r\n    };\r\n  }\r\n}\r\n"],"version":3}