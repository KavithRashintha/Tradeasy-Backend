{"file":"C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\supplier_management\\src\\app.service.ts","mappings":";;;;;;;;;;;;;;;AAAA,2CAA4C;AAC5C,6CAAmD;AACnD,uDAA6C;AAC7C,qCAAqC;AAGrC,qCAAgC;AAEhC,iCAAiC;AAG1B,IAAM,UAAU,GAAhB,MAAM,UAAU;IAErB,YAEqB,kBAAwC;QAAxC,uBAAkB,GAAlB,kBAAkB,CAAsB;IAC1D,CAAC;IAEJ,KAAK,CAAC,cAAc,CAAC,iBAA8B;QACjD,MAAM,YAAY,GAAG,EAAE,CAAC;QACxB,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;QACzE,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC;YACjD,GAAG,iBAAiB;YACnB,QAAQ,EAAE,IAAI;YACd,SAAS,EAAE,IAAI,IAAI,EAAE;SACxB,CAAC,CAAC;QAEF,OAAO,CAAC,GAAG,CAAC,aAAa,EAAC,WAAW,CAAC,CAAC;QACvC,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACzD,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,EAAU,EAAE,iBAA6C;QAC7E,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE,EAAE,iBAAiB,CAAC,CAAC;QAC5D,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IACvD,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,EAAM;QACtB,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IACvD,CAAC;IAED,KAAK,CAAC,sBAAsB,CAAC,QAAe;QAC1C,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC;IACxE,CAAC;IAED,KAAK,CAAC,eAAe;QACnB,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;IAC9C,CAAC;IAED,KAAK,CAAC,kBAAkB,CAAC,KAAY;QACnC,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;QACtC,MAAM,OAAO,GAAI,KAAK,CAAC,KAA8B,CAAC,OAAO,CAAC;QAC9D,IAAI,CAAC;YACH,MAAM,iBAAiB,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,EAAE,QAAQ,EAAE,IAAA,eAAK,EAAC,IAAI,OAAO,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;YAC7G,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,iBAAiB,CAAC,CAAC;YACtD,OAAO,iBAAiB,CAAC;QAC3B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,2CAA2C,EAAE,KAAK,CAAC,CAAC;YAClE,OAAO,EAAE,CAAC;QACZ,CAAC;IACH,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,EAAU,EAAE,iBAAoC;QACnE,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE,EAAE,iBAAiB,CAAC,CAAC;QAC5D,OAAO,MAAM,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IACvD,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,EAAU;QAC7B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACxD,IAAG,CAAC,MAAM,EAAC,CAAC;YACV,OAAO,aAAa,CAAC;QACvB,CAAC;aAAI,CAAC;YACJ,OAAO,sBAAsB,CAAC;QAChC,CAAC;IACH,CAAC;CACF,CAAA;AA/DY,gCAAU;qBAAV,UAAU;IADtB,IAAA,mBAAU,GAAE;IAIN,WAAA,IAAA,0BAAgB,EAAC,0BAAQ,CAAC,CAAA;qCACU,oBAAU;GAJxC,UAAU,CA+DtB","names":[],"sources":["C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\supplier_management\\src\\app.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Supplier } from './supplier.entity';\r\nimport { Repository } from 'typeorm';\r\nimport {SupplierDTO} from './dto/SupplierDTO';\r\nimport { UpdateSupplierDTO } from './dto/UpdateSupplierDTO';\r\nimport { ILike } from \"typeorm\";\r\nimport { Query } from 'express-serve-static-core';\r\nimport * as bcrypt from 'bcrypt';\r\n\r\n@Injectable()\r\nexport class AppService {\r\n  \r\n  constructor(\r\n      @InjectRepository(Supplier)\r\n      private readonly supplierRepository: Repository<Supplier>,\r\n  ) {}\r\n\r\n  async createSupplier(createSupplierDTO: SupplierDTO): Promise<Supplier> {\r\n    const saltOrRounds = 10;\r\n    const hash = await bcrypt.hash(createSupplierDTO.password, saltOrRounds);\r\n    const newSupplier = this.supplierRepository.create({ \r\n      ...createSupplierDTO,\r\n       password: hash,\r\n       lastLogin: new Date()\r\n   });\r\n\r\n    console.log(\"sup.service\",newSupplier);\r\n    return await this.supplierRepository.save(newSupplier);\r\n  }\r\n\r\n  async updateLastLogin(id: number, updateSupplierDto: Partial<UpdateSupplierDTO>): Promise<Supplier> {\r\n    await this.supplierRepository.update(id, updateSupplierDto);\r\n    return await this.supplierRepository.findOneById(id);\r\n  }\r\n\r\n  async getSupplier(id:any): Promise<Supplier | null>{\r\n    return await this.supplierRepository.findOneById(id);\r\n  }\r\n\r\n  async findSupplierByUsername(username:string): Promise<Supplier | null>{\r\n    return await this.supplierRepository.findOne({ where: { username } });\r\n  }\r\n\r\n  async getAllSuppliers():Promise<Supplier[]>{\r\n    return await this.supplierRepository.find();\r\n  }\r\n\r\n  async searchAllSuppliers(query: Query): Promise<Supplier[]> {\r\n    console.log('Received query:', query);\r\n    const keyword = (query.query as { keyword?: string }).keyword;\r\n    try {\r\n      const filteredSuppliers = await this.supplierRepository.find({ where: { username: ILike(`%${keyword}%`) } });\r\n      console.log('Filtered suppliers:', filteredSuppliers);\r\n      return filteredSuppliers;\r\n    } catch (error) {\r\n      console.error('Error occurred while searching suppliers:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  async updateSupplier(id: number, updateSupplierDto: UpdateSupplierDTO): Promise<Supplier> {\r\n    await this.supplierRepository.update(id, updateSupplierDto);\r\n    return await this.supplierRepository.findOneById(id);\r\n  }\r\n  \r\n  async deleteSupplier(id: number){\r\n    const result = await this.supplierRepository.delete(id);\r\n    if(!result){\r\n      return \"Not Deleted\";\r\n    }else{\r\n      return \"Successfully Deleted\";\r\n    }\r\n  }\r\n}\r\n\r\n"],"version":3}