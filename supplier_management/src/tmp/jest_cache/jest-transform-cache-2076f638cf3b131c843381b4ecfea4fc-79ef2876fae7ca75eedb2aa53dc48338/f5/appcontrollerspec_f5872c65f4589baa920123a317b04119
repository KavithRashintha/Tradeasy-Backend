78fa5ae14cbc2b45e952a3230ae925ab
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const app_controller_1 = require("./app.controller");
const app_service_1 = require("./app.service");
const supplier_entity_1 = require("./supplier.entity");
const UpdateSupplierDTO_1 = require("./dto/UpdateSupplierDTO");
describe('AppController', () => {
    let appController;
    let appService;
    beforeEach(async () => {
        const app = await testing_1.Test.createTestingModule({
            controllers: [app_controller_1.AppController],
            providers: [
                {
                    provide: app_service_1.AppService,
                    useValue: {
                        createSupplier: jest.fn(),
                        updateLastLogin: jest.fn(),
                        getSupplier: jest.fn(),
                        findSupplierByUsername: jest.fn(),
                        getAllSuppliers: jest.fn(),
                        searchAllSuppliers: jest.fn(),
                        updateSupplier: jest.fn(),
                        deleteSupplier: jest.fn(),
                    },
                },
            ],
        }).compile();
        appController = app.get(app_controller_1.AppController);
        appService = app.get(app_service_1.AppService);
    });
    describe('createSupplier', () => {
        it('should create a supplier', async () => {
            const createSupplierDto = {
                username: 'testuser',
                password: 'testpassword',
                email: 'test@example.com',
                contactNo: '123456789',
                role: 'supplier',
                address: '123 Test Street',
                nic: '123456789V',
                paymentMethod: 'credit card',
                paymentDetails: '1234-5678-9012-3456',
                profilePicture: 'profile.jpg',
            };
            const result = new supplier_entity_1.Supplier();
            jest.spyOn(appService, 'createSupplier').mockResolvedValue(result);
            expect(await appController.createSupplier(createSupplierDto)).toBe(result);
        });
    });
    describe('updateLastLogin', () => {
        it('should update the last login', async () => {
            const data = { id: 1, lastLogin: new Date() };
            const result = new supplier_entity_1.Supplier();
            jest.spyOn(appService, 'updateLastLogin').mockResolvedValue(result);
            expect(await appController.updateLastLogin(data)).toBe(result);
        });
    });
    describe('getSupplierById', () => {
        it('should return a supplier by id', async () => {
            const id = 1;
            const result = new supplier_entity_1.Supplier();
            jest.spyOn(appService, 'getSupplier').mockResolvedValue(result);
            expect(await appController.getSupplierById(id)).toBe(result);
        });
    });
    describe('getSupplierByUsername', () => {
        it('should return a supplier by username', async () => {
            const username = 'testuser';
            const result = new supplier_entity_1.Supplier();
            jest.spyOn(appService, 'findSupplierByUsername').mockResolvedValue(result);
            expect(await appController.getSupplierByUsername(username)).toBe(result);
        });
    });
    describe('getAllSuppliers', () => {
        it('should return all suppliers', async () => {
            const result = [new supplier_entity_1.Supplier()];
            jest.spyOn(appService, 'getAllSuppliers').mockResolvedValue(result);
            expect(await appController.getAllSuppliers()).toBe(result);
        });
    });
    describe('searchAllSuppliers', () => {
        it('should search all suppliers', async () => {
            const query = {};
            const result = [new supplier_entity_1.Supplier()];
            jest.spyOn(appService, 'searchAllSuppliers').mockResolvedValue(result);
            expect(await appController.searchAllSuppliers(query)).toBe(result);
        });
    });
    describe('updateSupplier', () => {
        it('should update a supplier', async () => {
            const data = { id: 1, updateSupplierDto: new UpdateSupplierDTO_1.UpdateSupplierDTO() };
            const result = new supplier_entity_1.Supplier();
            jest.spyOn(appService, 'updateSupplier').mockResolvedValue(result);
            expect(await appController.updateSupplier(data)).toBe(result);
        });
    });
    describe('deleteSupplier', () => {
        it('should delete a supplier', async () => {
            const id = 1;
            const result = 'Successfully Deleted';
            jest.spyOn(appService, 'deleteSupplier').mockResolvedValue(result);
            expect(await appController.deleteSupplier(id)).toBe(result);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,