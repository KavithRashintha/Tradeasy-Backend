{"file":"C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\payment_management\\src\\app.service.ts","mappings":"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","names":[],"sources":["C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\payment_management\\src\\app.service.ts"],"sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport { Injectable, BadRequestException } from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { CustomerPayments, SupplierPayments} from './payment.entity';\r\nimport { Repository } from 'typeorm';\r\nimport { CustomerPaymentDTO, Data} from './dto/cutomerPaymentDTO';\r\nimport { SupplierPaymentDTO } from './dto/supplierPaymentDTO';\r\nimport { ILike } from \"typeorm\";\r\nimport { Query } from 'express-serve-static-core';\r\nimport {Stripe} from 'stripe';\r\nimport { Cart } from './stripe/Cart.model';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport { Multer } from 'multer';\r\n\r\n\r\n@Injectable()\r\nexport class AppService {\r\n  [x: string]: any;\r\n  private stripe;\r\n  \r\n  constructor(\r\n    @InjectRepository(CustomerPayments)\r\n    private readonly customerPaymentManagement: Repository<CustomerPayments>,\r\n\r\n    @InjectRepository(SupplierPayments)\r\n    private readonly supplierPaymentManagement: Repository<SupplierPayments>,\r\n  ){\r\n    this.stripe = new Stripe(process.env.STRIPE_SECRET_KEY,{\r\n      apiVersion: '2024-04-10'\r\n    })\r\n  }\r\n\r\n  async createCustomerPaymentSession(data:{lineItems: Data[], metadata:any}){\r\n    const line_items = data.lineItems.map(item =>(\r\n      {\r\n        price_data: {\r\n          currency: item.price_data.currency,\r\n          product_data: {\r\n            name: item.price_data.product_data.name,\r\n            images: item.price_data.product_data.images[0]\r\n          },\r\n          unit_amount: item.price_data.unit_amount,\r\n        },\r\n        quantity: item.quantity,\r\n      }\r\n    ))\r\n\r\n    const session = await this.stripe.checkout.sessions.create({\r\n      mode: 'payment',\r\n      line_items,\r\n      success_url: 'http://localhost:3000/redirect',\r\n      cancel_url: 'http://localhost:3000/cancel',\r\n      metadata: data.metadata\r\n    });\r\n    //console.log('Session url:', session);\r\n\r\n    return session;\r\n  }\r\n\r\nasync getCheckoutSession(sessionId: string) {\r\n  try {\r\n    const session = await this.stripe.checkout.sessions.retrieve(sessionId);\r\n    console.log(\"session:\", session)\r\n    return session;\r\n  } catch (error) {\r\n    console.error('Error retrieving session details:', error);\r\n    throw new Error('Could not retrieve session details');\r\n  }\r\n  }\r\n\r\n  // async saveCustomerPaymentReceipt(paymentDetails: any): Promise<any> {\r\n  //   console.log(paymentDetails);\r\n  //   try {\r\n  //       const paymentIntent = await this.stripe.paymentIntents.create({\r\n  //           amount: paymentDetails.amount,\r\n  //           currency: 'lkr',\r\n  //           payment_method: paymentDetails.paymentId,\r\n  //           confirm: true,\r\n  //       });\r\n  \r\n  //       if (paymentIntent.status === 'succeeded') {\r\n  //         await this.emailService.sendReceipt(\r\n  //           paymentDetails.email,\r\n  //           'Payment Receipt',\r\n  //           `Thank you for your purchase! Your payment ID is ${paymentIntent.id}.`\r\n  //         );\r\n  //         console.log(\"Mail sent\");\r\n  //       }\r\n        \r\n  //       return paymentIntent;\r\n  //   } catch (error) {\r\n  //       console.error('Error creating payment intent:', error); // Log detailed error\r\n  //       throw new Error('Payment failed');\r\n  //   }\r\n  // }\r\n  \r\n\r\n  async saveCustomerPayments(paymentData: CustomerPayments): Promise<any> {\r\n    console.log(paymentData)\r\n    const newPayment = this.customerPaymentManagement.create({\r\n      ...paymentData,\r\n      date: new Date()\r\n    });\r\n    return await this.customerPaymentManagement.save(newPayment);\r\n  }\r\n\r\n  async getAllCustomerPayments(): Promise<CustomerPayments[]>{\r\n    return await this.customerPaymentManagement.find();\r\n  }\r\n\r\n  async getCustomerPaymentById(id: any): Promise<CustomerPayments | null>{\r\n    return await this.customerPaymentManagement.findOneById(id);\r\n  }\r\n\r\n  async searchAllPayments(query: Query): Promise<CustomerPayments[]> {\r\n    console.log('Received query:', query);\r\n    const keyword = (query.query as { keyword?: string }).keyword;\r\n    try {\r\n      const filteredPayments = await this.customerPaymentManagement.find({ where: { customerName: ILike(`%${keyword}%`) } });\r\n      console.log('Filtered suppliers:', filteredPayments);\r\n      return filteredPayments;\r\n    } catch (error) {\r\n      console.error('Error occurred while searching payments:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  //Supplier Payments\r\n  // async createSupplierPayment(supplierPaymentDTO: SupplierPaymentDTO): Promise<SupplierPayments> {\r\n  //   const newPayment = this.supplierPaymentManagement.create(supplierPaymentDTO);\r\n  //   return await this.supplierPaymentManagement.save(newPayment);\r\n  // }\r\n\r\n  async createSupplierPayment(supplierPaymentDTO: SupplierPaymentDTO): Promise<SupplierPayments> {\r\n    // // Check if the file data exists\r\n    // if (!supplierPaymentDTO.receipt || !supplierPaymentDTO.receipt.buffer) {\r\n    //   throw new Error('File data is missing');\r\n    // }\r\n\r\n    // const filePath = await this.saveFile(supplierPaymentDTO.receipt);\r\n    // supplierPaymentDTO.receipt = filePath;\r\n\r\n    const newPayment = this.supplierPaymentManagement.create(supplierPaymentDTO);\r\n    return await this.supplierPaymentManagement.save(newPayment);\r\n  }\r\n\r\n  async saveFile(file: Express.Multer.File): Promise<string> {\r\n    const uploadDir = 'uploads';\r\n    if (!fs.existsSync(uploadDir)) {\r\n      fs.mkdirSync(uploadDir);\r\n    }\r\n    const fileName = `${Date.now()}-${file.originalname}`;\r\n    const filePath = path.join(uploadDir, fileName);\r\n    await fs.promises.writeFile(filePath, file.buffer);\r\n    return filePath;\r\n  }\r\n\r\n  async getAllSupplierPayments(): Promise<SupplierPayments[]>{\r\n    return await this.supplierPaymentManagement.find();\r\n  }\r\n\r\n  async searchAllSupplierPayments(query: Query): Promise<SupplierPayments[]> {\r\n    console.log('Received query:', query);\r\n    const keyword = (query.query as { keyword?: string }).keyword;\r\n    try {\r\n      const filteredPayments = await this.supplierPaymentManagement.find({ where: { supplierName: ILike(`%${keyword}%`) } });\r\n      console.log('Filtered suppliers:', filteredPayments);\r\n      return filteredPayments;\r\n    } catch (error) {\r\n      console.error('Error occurred while searching payments:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n"],"version":3}