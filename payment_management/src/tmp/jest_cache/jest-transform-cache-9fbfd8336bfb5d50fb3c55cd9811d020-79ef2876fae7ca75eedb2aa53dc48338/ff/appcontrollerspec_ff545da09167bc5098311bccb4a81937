b1223a3631d0c6795762494c438a9019
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@nestjs/testing");
const app_controller_1 = require("./app.controller");
const app_service_1 = require("./app.service");
const payment_entity_1 = require("./payment.entity");
const supplierPaymentDTO_1 = require("./dto/supplierPaymentDTO");
describe('AppController', () => {
    let appController;
    let appService;
    beforeEach(async () => {
        const app = await testing_1.Test.createTestingModule({
            controllers: [app_controller_1.AppController],
            providers: [
                {
                    provide: app_service_1.AppService,
                    useValue: {
                        createCustomerPaymentSession: jest.fn(),
                        getCheckoutSession: jest.fn(),
                        saveCustomerPayments: jest.fn(),
                        getAllCustomerPayments: jest.fn(),
                        getCustomerPaymentById: jest.fn(),
                        searchAllPayments: jest.fn(),
                        createSupplierPayment: jest.fn(),
                        getAllSupplierPayments: jest.fn(),
                        searchAllSupplierPayments: jest.fn(),
                    },
                },
            ],
        }).compile();
        appController = app.get(app_controller_1.AppController);
        appService = app.get(app_service_1.AppService);
    });
    describe('createCustomerPaymentSession', () => {
        it('should return a session URL', async () => {
            const result = { sessionUrl: 'http://example.com' };
            jest.spyOn(appService, 'createCustomerPaymentSession').mockResolvedValue(result);
            expect(await appController.createCustomerPaymentSession({})).toBe(result);
        });
    });
    describe('getCheckoutSession', () => {
        it('should return a checkout session', async () => {
            const sessionId = 'sessionId';
            const result = { id: sessionId };
            jest.spyOn(appService, 'getCheckoutSession').mockResolvedValue(result);
            expect(await appController.getCheckoutSession(sessionId)).toBe(result);
        });
    });
    describe('saveCustomerPayments', () => {
        it('should save customer payments', async () => {
            const data = {};
            const result = new payment_entity_1.CustomerPayments();
            jest.spyOn(appService, 'saveCustomerPayments').mockResolvedValue(result);
            expect(await appController.saveCustomerPayments(data)).toBe(result);
        });
    });
    describe('getAllCustomerPayments', () => {
        it('should return all customer payments', async () => {
            const result = [new payment_entity_1.CustomerPayments()];
            jest.spyOn(appService, 'getAllCustomerPayments').mockResolvedValue(result);
            expect(await appController.getAllCustomerPayments()).toBe(result);
        });
    });
    describe('getCustomerPaymentById', () => {
        it('should return a customer payment by id', async () => {
            const id = 'id';
            const result = new payment_entity_1.CustomerPayments();
            jest.spyOn(appService, 'getCustomerPaymentById').mockResolvedValue(result);
            expect(await appController.getCustomerPaymentById(id)).toBe(result);
        });
    });
    describe('searchAllPayments', () => {
        it('should search all customer payments', async () => {
            const query = {};
            const result = [new payment_entity_1.CustomerPayments()];
            jest.spyOn(appService, 'searchAllPayments').mockResolvedValue(result);
            expect(await appController.searchAllPayments(query)).toBe(result);
        });
    });
    describe('createSupplierPayment', () => {
        it('should create supplier payment', async () => {
            const supplierPaymentDTO = new supplierPaymentDTO_1.SupplierPaymentDTO();
            const result = new payment_entity_1.SupplierPayments();
            jest.spyOn(appService, 'createSupplierPayment').mockResolvedValue(result);
            expect(await appController.createSupplierPayment(supplierPaymentDTO)).toBe(result);
        });
    });
    describe('getAllSupplierPayments', () => {
        it('should return all supplier payments', async () => {
            const result = [new payment_entity_1.SupplierPayments()];
            jest.spyOn(appService, 'getAllSupplierPayments').mockResolvedValue(result);
            expect(await appController.getAllSupplierPayments()).toBe(result);
        });
    });
    describe('searchAllSupplierPayments', () => {
        it('should search all supplier payments', async () => {
            const query = {};
            const result = [new payment_entity_1.SupplierPayments()];
            jest.spyOn(appService, 'searchAllSupplierPayments').mockResolvedValue(result);
            expect(await appController.searchAllSupplierPayments(query)).toBe(result);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,