{"file":"C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\inventory_management\\src\\app.service.ts","mappings":";;;;;;;;;;;;;;;AAAA,2CAA0C;AAC1C,6CAAmD;AACnD,yDAA0C;AAC1C,qCAAqD;AAM9C,IAAM,UAAU,GAAhB,MAAM,UAAU;IACrB,YAEmB,cAAgC;QAAhC,mBAAc,GAAd,cAAc,CAAkB;IAChD,CAAC;IAEJ,KAAK,CAAC,gBAAgB,CACpB,sBAAwC;QAExC,MAAM,gBAAgB,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;QAC5E,OAAO,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC1D,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,EAAU;QAC/B,OAAO,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IACnD,CAAC;IAED,KAAK,CAAC,oBAAoB;QACxB,OAAO,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;IAC1C,CAAC;IAED,KAAK,CAAC,mBAAmB,CACvB,EAAU,EACV,sBAA8C;QAE9C,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,EAAE,sBAAsB,CAAC,CAAC;QAC7D,OAAO,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IACnD,CAAC;IAED,KAAK,CAAC,mBAAmB,CAAC,EAAU;QAClC,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACpD,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,OAAO,aAAa,CAAC;QACvB,CAAC;aAAM,CAAC;YACN,OAAO,sBAAsB,CAAC;QAChC,CAAC;IACH,CAAC;IAED,KAAK,CAAC,0BAA0B,CAAC,eAAsB;QACrD,OAAO,MAAM,IAAI,CAAC,cAAc;aAC3B,kBAAkB,CAAC,MAAM,CAAC;aAC1B,KAAK,CAAC,yCAAyC,EAAE,EAAC,eAAe,EAAC,CAAC;aACnE,OAAO,EAAE,CAAC;IACjB,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,OAAO,MAAM,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;IAC3C,CAAC;IAED,KAAK,CAAC,2BAA2B;QAC/B,OAAO,MAAM,IAAI,CAAC,cAAc;aAC3B,kBAAkB,CAAC,MAAM,CAAC;aAC1B,MAAM,CAAC,sBAAsB,EAAE,UAAU,CAAC;aAC1C,SAAS,CAAC,gBAAgB,EAAE,OAAO,CAAC;aACpC,OAAO,CAAC,sBAAsB,CAAC;aAC/B,UAAU,EAAE,CAAC;IACpB,CAAC;IAED,KAAK,CAAC,qBAAqB;QACzB,OAAO,MAAM,IAAI,CAAC,cAAc;aAC3B,kBAAkB,CAAC,MAAM,CAAC;aAC1B,MAAM,CAAC,wCAAwC,CAAC;aAChD,KAAK,CAAC,2BAA2B,CAAC;aAClC,UAAU,EAAE,CAAC;IACpB,CAAC;IAED,KAAK,CAAC,kBAAkB;QACtB,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACpD,MAAM,wBAAwB,GAAG,MAAM,IAAI,CAAC,2BAA2B,EAAE,CAAC;QAC1E,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAE3D,OAAO;YACL,aAAa;YACb,wBAAwB;YACxB,eAAe;SAChB,CAAC;IACJ,CAAC;CAEF,CAAA;AA9EY,gCAAU;qBAAV,UAAU;IADtB,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,0BAAgB,EAAC,uBAAI,CAAC,CAAA;qCACU,oBAAU;GAHlC,UAAU,CA8EtB","names":[],"sources":["C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\inventory_management\\src\\app.service.ts"],"sourcesContent":["import {Injectable} from '@nestjs/common';\r\nimport { InjectRepository } from '@nestjs/typeorm';\r\nimport { Item } from './inventory.entity';\r\nimport {FindOptionsWhere, Repository} from 'typeorm';\r\nimport { InventoryItemDTO } from './dto/InventoryItemDTO';\r\nimport { UpdateInventoryItemDTO } from './dto/UpdateInventoryItemDTO';\r\nimport {stringify} from \"ts-jest\";\r\n\r\n@Injectable()\r\nexport class AppService {\r\n  constructor(\r\n    @InjectRepository(Item)\r\n    private readonly itemRepository: Repository<Item>,\r\n  ) {}\r\n\r\n  async addInventoryItem(\r\n    createInventoryItemDto: InventoryItemDTO,\r\n  ): Promise<Item> {\r\n    const newInventoryItem = this.itemRepository.create(createInventoryItemDto);\r\n    return await this.itemRepository.save(newInventoryItem);\r\n  }\r\n\r\n  async getInventoryItem(id: number): Promise<Item> {\r\n    return await this.itemRepository.findOneById(id);\r\n  }\r\n\r\n  async getAllInventoryItems(): Promise<Item[]> {\r\n    return await this.itemRepository.find();\r\n  }\r\n\r\n  async updateInventoryItem(\r\n    id: number,\r\n    updateInventoryItemDto: UpdateInventoryItemDTO,\r\n  ): Promise<Item> {\r\n    await this.itemRepository.update(id, updateInventoryItemDto);\r\n    return await this.itemRepository.findOneById(id);\r\n  }\r\n\r\n  async deleteInventoryItem(id: number) {\r\n    const result = await this.itemRepository.delete(id);\r\n    if (!result) {\r\n      return 'Not Deleted';\r\n    } else {\r\n      return 'Successfully Deleted';\r\n    }\r\n  }\r\n\r\n  async getInventoryItemByCategory(productCategory:string):Promise<Item[]>{\r\n    return await this.itemRepository\r\n        .createQueryBuilder('item')\r\n        .where('item.productCategory = :productCategory', {productCategory})\r\n        .getMany();\r\n  }\r\n\r\n  async getNumberOfItems(): Promise<any>{\r\n    return await this.itemRepository.count();\r\n  }\r\n\r\n  async getNumberOfItemsForCategory():Promise<any>{\r\n    return await this.itemRepository\r\n        .createQueryBuilder('item')\r\n        .select('item.productCategory', 'category')\r\n        .addSelect('COUNT(item.id)', 'count')\r\n        .groupBy('item.productCategory')\r\n        .getRawMany();\r\n  }\r\n\r\n  async getTheItemsOfLowStock():Promise<any>{\r\n    return await this.itemRepository\r\n        .createQueryBuilder('item')\r\n        .select('item.productName, item.productQuantity')\r\n        .where('item.productQuantity < 20')\r\n        .getRawMany();\r\n  }\r\n\r\n  async getInventoryStatus():Promise<any>{\r\n    const numberOfItems = await this.getNumberOfItems();\r\n    const numberOfItemsForCategory = await this.getNumberOfItemsForCategory();\r\n    const itemsOfLowStock = await this.getTheItemsOfLowStock();\r\n\r\n    return {\r\n      numberOfItems,\r\n      numberOfItemsForCategory,\r\n      itemsOfLowStock\r\n    };\r\n  }\r\n\r\n}"],"version":3}