{"file":"C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\inventory_management\\src\\app.controller.spec.ts","mappings":";;AAAA,6CAAsD;AACtD,qDAAiD;AACjD,+CAA2C;AAK3C,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,IAAI,aAA4B,CAAC;IACjC,IAAI,UAAsB,CAAC;IAE3B,UAAU,CAAC,KAAK,IAAI,EAAE;QACpB,MAAM,MAAM,GAAkB,MAAM,cAAI,CAAC,mBAAmB,CAAC;YAC3D,WAAW,EAAE,CAAC,8BAAa,CAAC;YAC5B,SAAS,EAAE,CAAC,wBAAU,CAAC;SACxB,CAAC,CAAC,OAAO,EAAE,CAAC;QAEb,UAAU,GAAG,MAAM,CAAC,GAAG,CAAa,wBAAU,CAAC,CAAC;QAChD,aAAa,GAAG,MAAM,CAAC,GAAG,CAAgB,8BAAa,CAAC,CAAC;IAC3D,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;YAC5C,yCAAyC;YACzC,MAAM,sBAAsB,GAAqB;gBAC/C,QAAQ,EAAE,CAAC;gBACX,WAAW,EAAE,cAAc;gBAC3B,YAAY,EAAE,YAAY;gBAC1B,mBAAmB,EAAE,mBAAmB;gBACxC,eAAe,EAAE,eAAe;gBAChC,kBAAkB,EAAE,kBAAkB;gBACtC,YAAY,EAAE,CAAC,YAAY,EAAE,YAAY,CAAC;gBAC1C,aAAa,EAAE,aAAa;gBAC5B,eAAe,EAAE,EAAE;gBACnB,gBAAgB,EAAE,KAAK;aACxB,CAAC;YAEF,sEAAsE;YACtE,MAAM,cAAc,GAAS;gBAC3B,EAAE,EAAE,CAAC;gBACL,QAAQ,EAAE,CAAC;gBACX,WAAW,EAAE,cAAc;gBAC3B,YAAY,EAAE,YAAY;gBAC1B,mBAAmB,EAAE,mBAAmB;gBACxC,eAAe,EAAE,eAAe;gBAChC,kBAAkB,EAAE,kBAAkB;gBACtC,YAAY,EAAE,CAAC,YAAY,EAAE,YAAY,CAAC;gBAC1C,aAAa,EAAE,aAAa;gBAC5B,eAAe,EAAE,EAAE;gBACnB,gBAAgB,EAAE,KAAK;aACxB,CAAC;YAEF,wDAAwD;YACxD,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;YAEjF,iDAAiD;YACjD,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,CAAC;YAE5E,qDAAqD;YACrD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,qDAAqD;IAErD,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;QAC5B,EAAE,CAAC,8BAA8B,EAAE,KAAK,IAAI,EAAE;YAC5C,MAAM,cAAc,GAAG,4CAA4C,CAAC;YAEpE,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,YAAY,EAAE,CAAC;YAClD,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["C:\\Users\\dinuk\\Desktop\\My Docs\\Projects\\Tradeasy\\Tradeasy-Backend\\inventory_management\\src\\app.controller.spec.ts"],"sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\r\nimport { AppController } from './app.controller';\r\nimport { AppService } from './app.service';\r\nimport { InventoryItemDTO } from './dto/InventoryItemDTO';\r\nimport { Item } from './inventory.entity';\r\nimport { UpdateInventoryItemDTO } from './dto/UpdateInventoryItemDTO';\r\n\r\ndescribe('AppController', () => {\r\n  let appController: AppController;\r\n  let appService: AppService;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      controllers: [AppController],\r\n      providers: [AppService],\r\n    }).compile();\r\n\r\n    appService = module.get<AppService>(AppService);\r\n    appController = module.get<AppController>(AppController);\r\n  });\r\n\r\n  afterEach(() => {\r\n    jest.clearAllMocks();\r\n  });\r\n\r\n  describe('addInventoryItem', () => {\r\n    it('should add an inventory item', async () => {\r\n      // Define a sample DTO object for testing\r\n      const createInventoryItemDto: InventoryItemDTO = {\r\n        sellerId: 1,\r\n        productName: 'Test Product',\r\n        productBrand: 'Test Brand',\r\n        productManufacturer: 'Test Manufacturer',\r\n        productCategory: 'Test Category',\r\n        productDescription: 'Test Description',\r\n        productImage: ['image1.jpg', 'image2.jpg'],\r\n        productColour: 'Test Colour',\r\n        productQuantity: 10,\r\n        productUnitPrice: 99.99,\r\n      };\r\n\r\n      // Define the expected result structure based on your appService logic\r\n      const expectedResult: Item = {\r\n        id: 1,\r\n        sellerId: 1,\r\n        productName: 'Test Product',\r\n        productBrand: 'Test Brand',\r\n        productManufacturer: 'Test Manufacturer',\r\n        productCategory: 'Test Category',\r\n        productDescription: 'Test Description',\r\n        productImage: ['image1.jpg', 'image2.jpg'],\r\n        productColour: 'Test Colour',\r\n        productQuantity: 10,\r\n        productUnitPrice: 99.99,\r\n      };\r\n\r\n      // Mock the service method to return the expected result\r\n      jest.spyOn(appService, 'addInventoryItem').mockResolvedValueOnce(expectedResult);\r\n\r\n      // Call the controller method with the DTO object\r\n      const result = await appController.addInventoryItem(createInventoryItemDto);\r\n\r\n      // Assert that the result matches the expected result\r\n      expect(result).toEqual(expectedResult);\r\n    });\r\n  });\r\n\r\n  // Add more test cases for other methods similarly...\r\n\r\n  describe('testFunction', () => {\r\n    it('should return a test message', async () => {\r\n      const expectedResult = 'Communication between services are working';\r\n\r\n      const result = await appController.testFunction();\r\n      expect(result).toEqual(expectedResult);\r\n    });\r\n  });\r\n});\r\n"],"version":3}